{
  "version": "1.6.2", 
  "nickname": "DFDOASHVAC", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "report", 
        "description": "Script variable OSHVACSystems", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "df_objs", 
        "description": "The input Dragonfly objects with a DOAS HVAC system applied.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_df_objs", 
      "description": "Dragonfly Buildings, Stories or Room2Ds to which the input template\nHVAC will be assigned. If a list of Room2Ds is input, all objects\nwill receive the same HVAC instance. Otherwise, each object gets its\nown instance (eg. each input Story will get its own HVAC). This can\nalso be an etire dragonfly Model.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_system_type", 
      "description": "Text for the specific type of DOAS system and equipment.\nThe \"HB DOAS HVAC Templates\" component has a full list of the\nsupported DOAS system templates.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_vintage_", 
      "description": "Text for the vintage of the template system. This will be used\nto set efficiencies for various pieces of equipment within the system.\nThe \"HB Building Vintages\" component has a full list of supported\nHVAC vintages. (Default: ASHRAE_2019).", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_name_", 
      "description": "Text to set the name for the HVAC system and to be incorporated into\nunique HVAC identifier. If the name is not provided, a random name\nwill be assigned.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "sensible_hr_", 
      "description": "A number between 0 and 1 for the effectiveness of sensible\nheat recovery within the system. Typical values range from 0.5 for\nsimple glycol loops to 0.81 for enthalpy wheels (the latter of\nwhich is a fairly common ECM for DOAS systems). (Default: 0).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "latent_hr_", 
      "description": "A number between 0 and 1 for the effectiveness of latent heat\nrecovery within the system. Typical values are 0 for all types of\nheat recovery except enthalpy wheels, which can have values as high\nas 0.76. (Default: 0).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "dcv_", 
      "description": "Boolean to note whether demand controlled ventilation should be\nused on the system, which will vary the amount of ventilation air\naccording to the occupancy schedule of the zone. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "doas_avail_sch_", 
      "description": "An optional On/Off discrete schedule to set when the dedicated\noutdoor air system (DOAS) shuts off. This will not only prevent\nany outdoor air from flowing thorough the system but will also\nshut off the fans, which can result in more energy savings when\nspaces served by the DOAS are completely unoccupied. If None, the\nDOAS will be always on. (Default: None).", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Energy", 
  "code": "\nimport os\nimport json\n\ntry:  # import the honeybee extension\n    from honeybee.typing import clean_and_id_ep_string, clean_ep_string\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the honeybee-energy extension\n    from honeybee_energy.config import folders\n    from honeybee_energy.hvac.doas import EQUIPMENT_TYPES_DICT\n    from honeybee_energy.lib.schedules import schedule_by_identifier\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\ntry:  # import the core dragonfly dependencies\n    from dragonfly.model import Model\n    from dragonfly.building import Building\n    from dragonfly.story import Story\n    from dragonfly.room2d import Room2D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly:\\n\\t{}'.format(e))\n\ntry:  # import the dragonfly-energy extension\n    import dragonfly_energy\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly_energy energy:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n# dictionary to get correct vintages\nvintages = {\n    'DOE_Ref_Pre_1980': 'DOE_Ref_Pre_1980',\n    'DOE_Ref_1980_2004': 'DOE_Ref_1980_2004',\n    'ASHRAE_2004': 'ASHRAE_2004',\n    'ASHRAE_2007': 'ASHRAE_2007',\n    'ASHRAE_2010': 'ASHRAE_2010',\n    'ASHRAE_2013': 'ASHRAE_2013',\n    'ASHRAE_2016': 'ASHRAE_2016',\n    'ASHRAE_2019': 'ASHRAE_2019',\n    'DOE Ref Pre-1980': 'DOE_Ref_Pre_1980',\n    'DOE Ref 1980-2004': 'DOE_Ref_1980_2004',\n    '90.1-2004': 'ASHRAE_2004',\n    '90.1-2007': 'ASHRAE_2007',\n    '90.1-2010': 'ASHRAE_2010',\n    '90.1-2013': 'ASHRAE_2013',\n    'pre_1980': 'DOE_Ref_Pre_1980',\n    '1980_2004': 'DOE_Ref_1980_2004',\n    '2004': 'ASHRAE_2004',\n    '2007': 'ASHRAE_2007',\n    '2010': 'ASHRAE_2010',\n    '2013': 'ASHRAE_2013',\n    '2016': 'ASHRAE_2016',\n    '2019': 'ASHRAE_2019',\n    None: 'ASHRAE_2019'\n}\n\n# dictionary of HVAC template names\next_folder = folders.standards_extension_folders[0]\nhvac_reg = os.path.join(ext_folder, 'hvac_registry.json')\nwith open(hvac_reg, 'r') as f:\n    hvac_dict = json.load(f)\n\n\nif all_required_inputs(ghenv.Component):\n    # duplicate the initial objects\n    df_objs = [obj.duplicate() for obj in _df_objs]\n\n    # process any input properties for the HVAC system\n    try:  # get the class for the HVAC system\n        try:\n            _sys_name = hvac_dict[_system_type]\n        except KeyError:\n            _sys_name = _system_type\n        hvac_class = EQUIPMENT_TYPES_DICT[_sys_name]\n    except KeyError:\n        raise ValueError('System Type \"{}\" is not recognized as a DOAS HVAC '\n                         'system.'.format(_system_type))\n    vintage = vintages[_vintage_]  # get the vintage of the HVAC\n    name = clean_and_id_ep_string('DOAS HVAC') if _name_ is None else clean_ep_string(_name_)\n\n    # create the HVAC\n    hvac = hvac_class(name, vintage, _sys_name, sensible_hr_, latent_hr_, dcv_)\n    if doas_avail_sch_ is not None:\n        if isinstance(doas_avail_sch_, str):\n            doas_avail_sch_ = schedule_by_identifier(doas_avail_sch_)\n        hvac.doas_availability_schedule = doas_avail_sch_\n    if _name_ is not None:\n        hvac.display_name = _name_\n\n    # apply the HVAC system to the objects\n    for obj in df_objs:\n        if isinstance(obj, (Building, Story)):\n            obj.properties.energy.set_all_room_2d_hvac(hvac)\n        elif isinstance(obj, Room2D):\n            if obj.properties.energy.is_conditioned:\n                obj.properties.energy.hvac = hvac\n        elif isinstance(obj, Model):\n            for bldg in obj.buildings:\n                bldg.properties.energy.set_all_room_2d_hvac(hvac)\n        else:\n            raise ValueError(\n                'Expected Dragonfly Room2D, Story, Building, or Model. '\n                'Got {}.'.format(type(obj)))\n", 
  "category": "Dragonfly", 
  "name": "DF DOAS HVAC", 
  "description": "Apply a Dedicated Outdoor Air System (DOAS) template HVAC to a list of Dragonfly\nBuildings, Stories or Room2Ds.\n_\nDOAS systems separate minimum ventilation supply from the satisfaction of heating\n+ cooling demand. Ventilation air tends to be supplied at neutral temperatures\n(close to room air temperature) and heating / cooling loads are met with additional\npieces of zone equipment (eg. Fan Coil Units (FCUs)).\n_\nBecause DOAS systems only have to cool down and re-heat the minimum ventilation air,\nthey tend to use less energy than all-air systems. They also tend to use less energy\nto distribute heating + cooling by puping around hot/cold water or refrigerant\ninstead of blowing hot/cold air. However, they do not provide as good of control\nover humidity and so they may not be appropriate for rooms with high latent loads\nlike auditoriums, kitchens, laundromats, etc.\n-"
}