{
  "version": "1.9.0", 
  "nickname": "StrToObj", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "df_obj", 
        "description": "A Dragonfly object serialized from the input string.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_df_str", 
      "description": "A text string that completely describes the dragonfly object.", 
      "type": "string", 
      "default": null
    }
  ], 
  "subcategory": "2 :: Serialize", 
  "code": "\ntry:  # import the core dragonfly dependencies\n    import dragonfly.dictutil as df_dict_util\n    from dragonfly.model import Model\n    from dragonfly.config import folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly:\\n\\t{}'.format(e))\n\ntry:  # import the core honeybee_energy dependencies\n    import honeybee_energy.dictutil as energy_dict_util\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\ntry:  # import the core honeybee_radiance dependencies\n    import honeybee_radiance.dictutil as radiance_dict_util\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_radiance:\\n\\t{}'.format(e))\n\ntry:  # import the core ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, give_warning\n    from ladybug_{{cad}}.config import units_system, tolerance\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\nimport json\n\n\ndef model_units_tolerance_check(model):\n    \"\"\"Convert a model to the current {{Cad}} units and check the tolerance.\n\n    Args:\n        model: A honeybee Model, which will have its units checked.\n    \"\"\"\n    # check the model units\n    if model.units != units_system():\n        print('Imported model units \"{}\" do not match that of the current {{Cad}} '\n            'model units \"{}\"\\nThe model is being automatically converted '\n            'to the {{Cad}} doc units.'.format(model.units, units_system()))\n        model.convert_to_units(units_system())\n\n    # check that the model tolerance is not too far from the {{Cad}} tolerance\n    if model.tolerance / tolerance >= 100:\n        msg = 'Imported Model tolerance \"{}\" is significantly coarser than the ' \\\n            'current {{Cad}} model tolerance \"{}\".\\nIt is recommended that the ' \\\n            '{{Cad}} document tolerance be changed to be coarser and this ' \\\n            'component is re-run.'.format(model.tolerance, tolerance)\n        print msg\n        give_warning(ghenv.Component, msg)\n\n\ndef version_check(data):\n    \"\"\"Check the version of the object if it was included in the dictionary.\n\n    This is most useful in cases of importing entire Models to make sure\n    the Model isn't newer than the currently installed Dragonfly.\n\n    Args:\n        data: Dictionary of the object, which optionally has the \"version\" key.\n    \"\"\"\n    if 'version' in data and data['version'] is not None:\n        model_ver = tuple(int(d) for d in data['version'].split('.'))\n        df_ver = folders.dragonfly_schema_version\n        if model_ver > df_ver:\n            msg = 'Imported Model schema version \"{}\" is newer than that with the ' \\\n            'currently installed Dragonfly \"{}\".\\nThe Model may fail to import ' \\\n            'or (worse) some newer features of the Model might not be imported ' \\\n            'without detection.'.format(data['version'], folders.dragonfly_schema_version_str)\n            print msg\n            give_warning(ghenv.Component, msg)\n        elif model_ver != df_ver:\n            msg = 'Imported Model schema version \"{}\" is older than that with the ' \\\n            'currently installed Dragonfly \"{}\".\\nThe Model will be upgraded upon ' \\\n            'import.'.format(data['version'], folders.dragonfly_schema_version_str)\n            print msg\n\n\nif all_required_inputs(ghenv.Component):\n    df_dict = json.loads(_df_str)\n    version_check(df_dict)  # try to check the version\n    df_obj = df_dict_util.dict_to_object(df_dict, False)  # re-serialize as a core object\n    if df_obj is None:  # try to re-serialize it as an energy object\n        df_obj = energy_dict_util.dict_to_object(df_dict, False)\n        if df_obj is None:  # try to re-serialize it as a radiance object\n            df_obj = radiance_dict_util.dict_to_object(df_dict, False)\n    elif isinstance(df_obj, Model):\n        model_units_tolerance_check(df_obj)\n", 
  "category": "Dragonfly", 
  "name": "DF String to Object", 
  "description": "Serialize any dragonfly JSON text string back to a dragonfly object.\n-\nThis includes any Model, Building, Story, Room2D, WindowParameter, or ShadingParameter.\n-\nIt also includes any dragonfly energy Material, Construction, ConstructionSet,\nSchedule, Load, ProgramType, or Simulation object.\n-"
}