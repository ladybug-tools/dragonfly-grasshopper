{
  "version": "1.4.1", 
  "nickname": "RunURBANopt", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "scenario", 
        "description": "File path to the URBANopt scenario CSV used as input for the\nURBANopt CLI run.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "osm", 
        "description": "File paths to the OpenStudio Models (OSM) that were generated in the\nprocess of running URBANopt.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "idf", 
        "description": "File paths to the EnergyPlus Input Data Files (IDF) that were generated\nin the process of running URBANopt.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "sql", 
        "description": "List of paths to .sqlite files containing all simulation results.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "zsz", 
        "description": "List of paths to .csv files containing detailed zone load information\nrecorded over the course of the design days.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "rdd", 
        "description": "File paths of the Result Data Dictionary (.rdd) that were generated\nafter running the file through EnergyPlus.  This file contains all\npossible outputs that can be requested from the EnergyPlus model. Use the\n\"Read Result Dictionary\" component to see what outputs can be requested.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "html", 
        "description": "File paths of the HTMLs containting all Summary Reports.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_geojson", 
      "description": "The path to an URBANopt-compatible geoJSON file. This geoJSON\nfile can be obtained form the \"DF Model to geoJSON\" component.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_epw_file", 
      "description": "Path to an .epw file on this computer as a text string.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_sim_par_", 
      "description": "A honeybee Energy SimulationParameter object that describes all\nof the settings for the simulation. If None, some default simulation\nparameters will be automatically generated.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "measures_", 
      "description": "An optional list of measures to apply to the OpenStudio model\nupon export. Use the \"HB Load Measure\" component to load a measure\ninto Grasshopper and assign input arguments. Measures can be\ndownloaded from the NREL Building Components Library (BCL) at", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "mappers_", 
      "description": "An optional list of dragonfly MapperMeasure objects to be included\nin the output osw. MapperMeasures are just like normal OpenStudio\nmeasures except they can accept a list of values for their arguments\nthat align with the buildings in dragonfly Model. Each value in\nthe list will be mapped to a different building.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "report_", 
      "description": "Boolean to note whether to include the URBANopt default feature reporting\nmeasure as part of the simulation. If True, the measure will be run\nafter all simulations are complete. (Default:True).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_cpus_", 
      "description": "A positive integer for the number of CPUs to use in the simulation.\nThis number should not exceed the number of CPUs on the machine\nrunning the simulation and should be lower if other tasks are\nrunning while the simulation is running. If set to None, it\nshould automatically default to one less than the number of CPUs\ncurrently available on the machine (or 1 if the machine has only\none processor). (Default: None).", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to \"True\" to run the geojson through URBANopt.\nThis will ensure that all result files appear in their respective\noutputs from this component. This input can also be the integer \"2\",\nwhich will only run the setup of the URBANopt project folder\n(including the creation of the scenario file) but will not execute\nthe simulations.", 
      "type": "int", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Energy", 
  "code": "\n\ntry:\n    from honeybee_energy.simulation.parameter import SimulationParameter\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\ntry:  # import the dragonfly_energy dependencies\n    from dragonfly_energy.run import base_honeybee_osw, prepare_urbanopt_folder, \\\n        run_urbanopt\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly_energy:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, recommended_processor_count\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\nimport os\nimport json\n\n\nif all_required_inputs(ghenv.Component) and _run:\n    # check that the EPW and geoJSON files exists\n    assert os.path.isfile(_epw_file), \\\n        'No EPW file was found at: {}'.format(_epw_file)\n    assert os.path.isfile(_geojson), \\\n        'No geoJSON file was found at: {}'.format(_geojson)\n    directory = os.path.dirname(_geojson)\n\n    # generate default SimulationParameters if None are input to the component\n    if _sim_par_ is None:\n        _sim_par_ = SimulationParameter()\n        _sim_par_.output.add_zone_energy_use()\n        _sim_par_.output.add_hvac_energy_use()\n\n    # assign design days from the DDY next to the EPW if there are None\n    if len(_sim_par_.sizing_parameter.design_days) == 0:\n        folder, epw_file_name = os.path.split(_epw_file)\n        ddy_file = os.path.join(folder, epw_file_name.replace('.epw', '.ddy'))\n        if os.path.isfile(ddy_file):\n            _sim_par_.sizing_parameter.add_from_ddy_996_004(ddy_file)\n        else:\n            raise ValueError('No _ddy_file_ has been input and no .ddy file was '\n                             'found next to the _epw_file.')\n\n    # write the simulation parameter JSONs\n    sim_par_dict = _sim_par_.to_dict()\n    sim_par_json = os.path.join(directory, 'simulation_parameter.json')\n    with open(sim_par_json, 'w') as fp:\n        json.dump(sim_par_dict, fp)\n\n    # write the base OSW to be used to translate all geoJSON features\n    measures = None if len(measures_) == 0 or measures_[0] is None else measures_\n    mappers = None if len(mappers_) == 0 or mappers_[0] is None else mappers_\n    skip_report = not report_ if report_ is not None else False\n    base_honeybee_osw(\n        directory, sim_par_json=sim_par_json, additional_measures=measures,\n        additional_mapper_measures=mappers,\n        epw_file=_epw_file, skip_report=skip_report)\n\n    # prepare the URBANopt folder and generate the scenario\n    _cpus_ = _cpus_ if _cpus_ is not None else recommended_processor_count()\n    scenario = prepare_urbanopt_folder(_geojson, _cpus_)\n\n    # execute the simulation with URBANopt CLI\n    if _run == 1:\n        osm, idf, sql, zsz, rdd, html, err = run_urbanopt(_geojson, scenario, _cpus_)\n", 
  "category": "Dragonfly", 
  "name": "DF Run URBANopt", 
  "description": "Run an URBANopt geoJSON through EnergyPlus using the URBANopt CLI.\n_\nThis component requires the URBANopt CLI to be installed in order to run.\nInstallation instructions for the URBANopt CLI can be found at:\nhttps://docs.urbanopt.net/installation/installation.html\n-"
}