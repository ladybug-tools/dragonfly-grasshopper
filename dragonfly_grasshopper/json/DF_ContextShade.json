{
  "version": "1.5.0", 
  "nickname": "Context", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "context", 
        "description": "Dragonfly ContextShades.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_geo", 
      "description": "Rhino Brep geometry.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_name_", 
      "description": "A name for the ContextShade. If the name is not provided a random\nname will be assigned.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "ep_constr_", 
      "description": "Optional text for the ContextShade's energy construction to be looked\nup in the construction library. This can also be a custom construction\nobject. If no energy construction is input here, a default will be\nassigned.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "ep_trans_sch_", 
      "description": "Optional text for the ContextShade's energy transmittance\nschedule to be looked up in the schedule library. This can also be a\ncustom schedule object. If no energy schedule is input here, the default\nwill be always opaque.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "uwg_is_veg_", 
      "description": "Boolean to note whether the shade represents a tree canopy within\nsimulations with the Urban Weather Generator (UWG), in which case,\nit will be incorporated into the simulation as tree cover. NOTE that,\nwhen using this option, only the tops and sides of the tree canopy\ngeometry should be modeled. Modeling the bottom of the tree canopy\nwill result in double-counting the horizontal area of the canopy and\nwill also create extra unnessary geometry in EnergyPlus or Radiance\ncalculations using the dragonfly model. (Default: False).", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Create", 
  "code": "\ntry:  # import the core honeybee dependencies\n    from honeybee.typing import clean_and_id_string\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the core dragonfly dependencies\n    from dragonfly.context import ContextShade\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.togeometry import to_face3d\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, longest_list, \\\n        document_counter\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\ntry:  # import the honeybee-energy extension\n    from honeybee_energy.lib.constructions import shade_construction_by_identifier\n    from honeybee_energy.lib.schedules import schedule_by_identifier\nexcept ImportError as e:\n    if len(ep_constr_) != 0:\n        raise ValueError('ep_constr_ has been specified but honeybee-energy '\n                         'has failed to import.\\n{}'.format(e))\n    elif len(ep_trans_sch_) != 0:\n        raise ValueError('ep_trans_sch_ has been specified but honeybee-energy '\n                         'has failed to import.\\n{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    context = []  # list of context shades that will be returned\n    for i, geo in enumerate(_geo):\n        # get the name for the ContextShade\n        if len(_name_) == 0:  # make a default name\n            display_name = 'Context_{}'.format(document_counter('context_count'))\n        else:\n            display_name = '{}_{}'.format(longest_list(_name_, i), i + 1) \\\n                if len(_name_) != len(_geo) else longest_list(_name_, i)\n        name = clean_and_id_string(display_name)\n\n        # create the ContextShade object\n        df_shd = ContextShade(name, to_face3d(geo))\n        df_shd.display_name = display_name\n\n        # try to assign the energyplus construction\n        if len(ep_constr_) != 0:\n            ep_constr = longest_list(ep_constr_, i)\n            if isinstance(ep_constr, str):\n                ep_constr = shade_construction_by_identifier(ep_constr)\n            df_shd.properties.energy.construction = ep_constr\n\n        # try to assign the energyplus transmittance schedule\n        if len(ep_trans_sch_) != 0:\n            ep_trans_sch = longest_list(ep_trans_sch_, i)\n            if isinstance(ep_trans_sch, str):\n                ep_trans_sch = schedule_by_identifier(ep_trans_sch)\n            df_shd.properties.energy.transmittance_schedule = ep_trans_sch\n\n        # try to assign the uwg us_vegetation property\n        try:\n            df_shd.properties.uwg.is_vegetation = uwg_is_veg_\n        except AttributeError:\n            pass  # no dragonfly_uwg extension installed\n\n        context.append(df_shd)  # collect the final ContextShades", 
  "category": "Dragonfly", 
  "name": "DF ContextShade", 
  "description": "Create Dragonfly ContextShade.\n-"
}