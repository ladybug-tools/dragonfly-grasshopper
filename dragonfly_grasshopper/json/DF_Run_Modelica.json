{
  "version": "1.9.1", 
  "nickname": "RunModelica", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "results", 
        "description": "A folder containing the results of the Modelica simulation.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_modelica", 
      "description": "A folder where all of the Modelica files of the District Energy\nSystem (DES) are written. These Modelica files can be created using\nthe \"DF Write Modelica DES\" component.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Script variable Python", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "5 :: District Thermal", 
  "code": "\nimport os\nimport subprocess\n\ntry:\n    from ladybug.futil import nukedir\n    from ladybug.config import folders as lb_folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee.config import folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the dragonfly_energy dependencies\n    from dragonfly_energy.config import folders as df_folders\n    from dragonfly_energy.run import run_modelica_docker\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly_energy:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.download import download_file_by_name\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, give_warning\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\nUO_GMT_VERSION = '0.11.0'\n\n\nif all_required_inputs(ghenv.Component) and _run:\n    # set up the custom python environment\n    custom_env = os.environ.copy()\n    custom_env['PYTHONHOME'] = ''\n\n    # set global values\n    ext = '.exe' if os.name == 'nt' else ''\n    executor_path = os.path.join(\n        lb_folders.ladybug_tools_folder, '{{plugin}}',\n        'ladybug_{{plugin}}_dotnet', 'Ladybug.Executor.exe')\n\n    # check to see if the geojson-modelica-translator is installed\n    uo_gmt = '{}/uo_des{}'.format(folders.python_scripts_path, ext)\n    uo_gmt_pack = '{}/geojson_modelica_translator-{}.dist-info'.format(\n        folders.python_package_path, UO_GMT_VERSION)\n    if not os.path.isfile(uo_gmt) or not os.path.isdir(uo_gmt_pack):\n        install_cmd = 'pip install geojson-modelica-translator=={}'.format(UO_GMT_VERSION)\n        if os.name == 'nt' and os.path.isfile(executor_path) and \\\n                'Program Files' in executor_path:\n            pip_cmd = [\n                executor_path, folders.python_exe_path, '-m {}'.format(install_cmd)\n            ]\n        else:\n            pip_cmd = '\"{py_exe}\" -m {uo_cmd}'.format(\n                py_exe=folders.python_exe_path, uo_cmd=install_cmd)\n        shell = True if os.name == 'nt' else False\n        process = subprocess.Popen(\n            pip_cmd, stderr=subprocess.PIPE, shell=shell, env=custom_env)\n        stderr = process.communicate()\n\n    # execute the modelica files in URBANopt\n    if df_folders.docker_version_str is not None:\n        results = run_modelica_docker(_modelica)\n    else:\n        docker_url  = 'https://www.docker.com/products/docker-desktop/'\n        msg = 'No Docker installation was found on this machine.\\n' \\\n            'This is needed to execute Modelica simulations.\\n' \\\n            'Download Docker Desktop from: {}'.format(docker_url)\n        print(msg)\n        give_warning(ghenv.Component, msg)\n", 
  "category": "Dragonfly", 
  "name": "DF Run Modelica", 
  "description": "Run a Modelica District Energy System (DES) through an annual simulation using\nOpenModelica inside a Docker image (via Docker Desktop).\n_\nDocker Dekstop can be downloaded at the following link:\nhttps://www.docker.com/products/docker-desktop/\n-"
}