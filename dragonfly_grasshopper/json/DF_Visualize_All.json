{
  "version": "1.8.2", 
  "nickname": "VizAll", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "geo", 
        "description": "The Rhino version of the Dragonfly geometry object, which will be\nvisible in the Rhino scene.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_df_objs", 
      "description": "A Dragonfly Model, Building, Story, Room2D, or ContextShade to\nbe previewed in the Rhino scene.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "1 :: Visualize", 
  "code": "\ntry:  # import the ladybug_geometry dependencies\n    from ladybug_geometry.geometry3d import Face3D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_geometry:\\n\\t{}'.format(e))\n\ntry:  # import the core dragonfly dependencies\n    from dragonfly.model import Model\n    from dragonfly.building import Building\n    from dragonfly.story import Story\n    from dragonfly.room2d import Room2D\n    from dragonfly.context import ContextShade\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.fromgeometry import from_face3d, from_face3d_to_solid, \\\n        from_polyface3d, from_mesh3d\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\ndef room_2d_geometry(room_2ds):\n    \"\"\"Get {{Cad}} geometry from a list of Room2Ds.\"\"\"\n    room_geo = []\n    for room in room_2ds:\n        if room.has_parent and room.parent.roof is not None:\n            hb_rm, adj_info = room.to_honeybee()\n            room_geo.append(from_polyface3d(hb_rm.geometry))\n        else:\n            room_geo.append(\n                from_face3d_to_solid(room.floor_geometry, room.floor_to_ceiling_height))\n    return room_geo\n\n\ndef room_3d_geometry(room_3ds):\n    \"\"\"Get {{Cad}} geometry from a list of 3D Rooms.\"\"\"\n    room_geo = []\n    for room in room_3ds:\n        room_geo.append(from_polyface3d(room.geometry))\n    return room_geo\n\n\ndef context_shade_geometry(context_shades):\n    \"\"\"Get {{Cad}} geometry from a list of ContextShades.\"\"\"\n    shds = []\n    for shd_geo in context_shades:\n        for fc in shd_geo.geometry:\n            go = from_face3d(fc) if isinstance(fc, Face3D) else from_mesh3d(fc)\n            shds.append(go)\n    return shds\n\n\nif all_required_inputs(ghenv.Component):\n    # lists of {{cad}} geometry to be filled with content\n    geo = []\n\n    # loop through all objects and add them\n    for df_obj in _df_objs:\n        if isinstance(df_obj, Model):\n            rooms = []\n            for bldg in df_obj.buildings:\n                rooms.extend(bldg.all_room_2ds())\n            geo.extend(room_2d_geometry(rooms))\n            geo.extend(room_3d_geometry(df_obj.room_3ds))\n            geo.extend(context_shade_geometry(df_obj.context_shades))\n        elif isinstance(df_obj, Building):\n            geo.extend(room_2d_geometry(df_obj.all_room_2ds()))\n            geo.extend(room_3d_geometry(df_obj.room_3ds))\n        elif isinstance(df_obj, Story):\n            geo.extend(room_2d_geometry(df_obj.room_2ds))\n        elif isinstance(df_obj, Room2D):\n            geo.extend(room_2d_geometry([df_obj]))\n        elif isinstance(df_obj, ContextShade):\n            geo.extend(context_shade_geometry([df_obj]))\n", 
  "category": "Dragonfly", 
  "name": "DF Visualize All", 
  "description": "Preview any Dragonfly geometry object within the Rhino scene, including all stories\nrepresented by multipliers\n-"
}