{
  "version": "1.1.2", 
  "nickname": "DFHeatCoolHVAC", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "report", 
        "description": "Script variable OSHVACSystems", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "df_objs", 
        "description": "The input Dragonfly objects with a heating/cooling system applied.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_df_objs", 
      "description": "Dragonfly Buildings, Stories or Room2Ds to which the input template\nHVAC will be assigned. If a list of Room2Ds is input, all objects\nwill receive the same HVAC instance. Otherwise, each object gets its\nown instance (eg. each input Story will get its own HVAC). This can\nalso be an etire dragonfly Model.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_system_type", 
      "description": "Text for the specific type of heating/cooling system and equipment.\nThe \"HB HeatCool HVAC Templates\" component has a full list of the\nsupported Heating/Cooling system templates.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_vintage_", 
      "description": "Text for the vintage of the template system. This will be used\nto set efficiencies for various pieces of equipment within the system.\nThe \"HB Building Vintages\" component has a full list of supported\nHVAC vintages. (Default: ASHRAE_2013).", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_name_", 
      "description": "Text to set the name for the heating/cooling system and to be\nincorporated into unique system identifier. If the name is not\nprovided, a random name will be assigned.", 
      "type": "string", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Energy", 
  "code": "\nimport os\nimport json\nimport uuid\n\ntry:  # import the honeybee extension\n    from honeybee.altnumber import autosize\n    from honeybee.typing import clean_and_id_ep_string\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the honeybee-energy extension\n    from honeybee_energy.config import folders\n    from honeybee_energy.hvac.heatcool import EQUIPMENT_TYPES_DICT\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\ntry:  # import the core dragonfly dependencies\n    from dragonfly.model import Model\n    from dragonfly.building import Building\n    from dragonfly.story import Story\n    from dragonfly.room2d import Room2D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly:\\n\\t{}'.format(e))\n\ntry:  # import the dragonfly-energy extension\n    import dragonfly_energy\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly_energy energy:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n# dictionary to get correct vintages\nvintages = {\n    'DOE_Ref_Pre_1980': 'DOE_Ref_Pre_1980',\n    'DOE_Ref_1980_2004': 'DOE_Ref_1980_2004',\n    'ASHRAE_2004': 'ASHRAE_2004',\n    'ASHRAE_2007': 'ASHRAE_2007',\n    'ASHRAE_2010': 'ASHRAE_2010',\n    'ASHRAE_2013': 'ASHRAE_2013',\n    'DOE Ref Pre-1980': 'DOE_Ref_Pre_1980',\n    'DOE Ref 1980-2004': 'DOE_Ref_1980_2004',\n    '90.1-2004': 'ASHRAE_2004',\n    '90.1-2007': 'ASHRAE_2007',\n    '90.1-2010': 'ASHRAE_2010',\n    '90.1-2013': 'ASHRAE_2013',\n    'pre_1980': 'DOE_Ref_Pre_1980',\n    '1980_2004': 'DOE_Ref_1980_2004',\n    '2004': 'ASHRAE_2004',\n    '2007': 'ASHRAE_2007',\n    '2010': 'ASHRAE_2010',\n    '2013': 'ASHRAE_2013',\n    None: 'ASHRAE_2013'\n    }\n\n# dictionary of HVAC template names\next_folder = folders.standards_extension_folders[0]\nhvac_reg = os.path.join(ext_folder, 'hvac_registry.json')\nwith open(hvac_reg, 'r') as f:\n    hvac_dict = json.load(f)\n\n\nif all_required_inputs(ghenv.Component):\n    # duplicate the initial objects\n    df_objs = [obj.duplicate() for obj in _df_objs]\n\n    # create the instance of the HVAC system to be applied to the rooms\n    try:  # get the class for the HVAC system\n        try:\n            _sys_name = hvac_dict[_system_type]\n        except KeyError:\n            _sys_name = _system_type\n        hvac_class = EQUIPMENT_TYPES_DICT[_sys_name]\n    except KeyError:\n        raise ValueError('System Type \"{}\" is not recognized as a HeatCool HVAC '\n                         'system.'.format(_system_type))\n    vintage = vintages[_vintage_]  # get the vintage of the HVAC\n    # get an identifier for the HVAC system\n    name = clean_and_id_ep_string(_name_) if _name_ is not None else str(uuid.uuid4())[:8]\n    hvac = hvac_class(name, vintage, _sys_name)\n    if _name_ is not None:\n        hvac.display_name = _name_\n\n    # apply the HVAC system to the objects\n    for obj in df_objs:\n        if isinstance(obj, (Building, Story)):\n            obj.properties.energy.set_all_room_2d_hvac(hvac)\n        elif isinstance(obj, Room2D) and obj.properties.energy.is_conditioned:\n            obj.properties.energy.hvac = hvac\n        elif isinstance(obj, Model):\n            for bldg in obj.buildings:\n                bldg.properties.energy.set_all_room_2d_hvac(hvac)\n        else:\n            raise ValueError(\n                'Expected Dragonfly Room2D, Story, Building, or Model. '\n                'Got {}.'.format(type(hb_obj)))\n", 
  "category": "Dragonfly", 
  "name": "DF HeatCool HVAC", 
  "description": "Apply a template system that only supplies heating and/or cooling (no ventilation)\nto a list of Dragonfly Buildings, Stories or Room2Ds.\n_\nThese systems are only designed to satisfy heating + cooling demand and they\ncannot meet any minimum ventilation requirements.\n_\nAs such, these systems tend to be used in residential or storage settings where\nmeeting minimum ventilation requirements may not be required or the density\nof occupancy is so low that infiltration is enough to meet fresh air demand.\n-"
}