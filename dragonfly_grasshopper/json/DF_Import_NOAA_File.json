{
  "version": "1.6.0", 
  "nickname": "ImportNOAA", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "location", 
        "description": "Script variable ImportNOAA", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "dry_bulb_temp", 
        "description": "The houlry dry bulb temperature, in C.\nNote that this is a full numeric field (i.e. 23.6) and not an integer\nrepresentation with tenths. Valid values range from 70 C to\n70 C. Missing value for this field is 99.9.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "dew_point_temp", 
        "description": "The hourly dew point temperature, in C.\nNote that this is a full numeric field (i.e. 23.6) and not an integer\nrepresentation with tenths. Valid values range from 70 C to\n70 C. Missing value for this field is 99.9.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "wind_speed", 
        "description": "The hourly wind speed in m/sec.\nValues can range from 0 to 40. Missing value is 999.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "wind_direction", 
        "description": "The hourly wind direction in degrees.\nThe convention is that North=0.0, East=90.0, South=180.0, West=270.0.\n(If wind is calm for the given hour, the direction equals zero.)\nValues can range from 0 to 360. Missing value is 999.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "total_sky_cover", 
        "description": "The fraction for total sky cover (tenths of coverage).\n(i.e. 1 is 1/10 covered. 10 is total coverage) (Amount of sky\ndome in tenths covered by clouds or obscuring phenomena at the\nhour indicated at the time indicated.) Minimum value is 0;\nmaximum value is 10; missing value is 99.\"", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "atmos_pressure", 
        "description": "The hourly weather station pressure in Pa.\nValid values range from 31,000 to 120,000...\nMissing value for this field is 999999.\"", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "visibility", 
        "description": "This is the value for visibility in km. (Horizontal\nvisibilitY). It is not currently used in EnergyPlus calculations.\nMissing value is 9999.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "ceiling_height", 
        "description": "Script output ceiling_height.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "model_year", 
        "description": "The year from which the hourly data has been extracted.\nNote that, for this component to run correclty, all of the data in\nthe text file must be from a single year.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_noaa_file", 
      "description": "The path to a .csv file of annual data obtained from the NOAA\ndatabase on your system as a string.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "time_zone_", 
      "description": "Optional time zone for the station.  If blank, a default time\nzone will be estimated from the longitude.", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_timestep_", 
      "description": "Integer forthe timestep at which the data collections should be output.\nData in the .csv that does not conform to this timestep will be\nignored in the output data collections. This can be set as high\nas 60 to ensure that all data from the .csv file is imported.\nHowever, such large data collections can be time consuming to\nedit. (Default: 1).", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to True to run the component and import the data.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "4 :: AlternativeWeather", 
  "code": "\nimport os\nimport csv\nimport datetime\n\ntry:\n    from ladybug.location import Location\n    from ladybug.dt import DateTime\n    from ladybug.analysisperiod import AnalysisPeriod\n    from ladybug.header import Header\n    from ladybug.datacollection import HourlyDiscontinuousCollection, HourlyContinuousCollection\n    from ladybug.datatype.temperature import DryBulbTemperature, DewPointTemperature\n    from ladybug.datatype.speed import WindSpeed\n    from ladybug.datatype.angle import WindDirection\n    from ladybug.datatype.fraction import TotalSkyCover\n    from ladybug.datatype.pressure import AtmosphericStationPressure\n    from ladybug.datatype.distance import Visibility, CeilingHeight\n    from ladybug.datatype.generic import GenericType\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\ndef extract_location(climate_file, time_zone=None):\n    \"\"\"Extract a Ladybug Location object from the data in the CSV.\n    \n    Args:\n        climate_file: file path to the NCDC .csv file.\n        time_zone: Optional integer for the time zone. If None, it will be\n            estimated from the longitude in the file.\n    \"\"\"\n    with open(climate_file) as station_file:\n        station_file.readline()  # Skip header row\n\n        # get the pattern of data within the file\n        dat_line = station_file.readline().strip().split(',')\n\n        # parse all of the info from the file\n        station_id = dat_line[0].replace('\"', '')\n        city = dat_line[6].replace('\"', '')\n        latitude = float(dat_line[3].replace('\"', ''))\n        longitude = float(dat_line[4].replace('\"', ''))\n        elevation = float(dat_line[5].replace('\"', ''))\n\n        # estimate or parse time zone.\n        if time_zone:\n            assert -12 <= time_zone <= 14, ' time_zone must be between -12 and '\\\n                ' 14. Got {}.'.format(time_zone)\n            time_zone = time_zone\n        else:\n            time_zone = int((longitude / 180) * 12)\n\n        # build the location object\n        location = Location(\n            city=city, latitude=latitude, longitude=longitude,\n            time_zone=time_zone, elevation=elevation,\n            station_id=station_id, source='NCDC')\n    return location, time_zone\n\n\ndef build_collection(values, dates, data_type, unit, time_offset, year):\n    \"\"\"Build a data collection from raw noaa data and process it to the timestep.\n\n    Args:\n        values: A list of values to be included in the data collection.\n        dates: A list of datetime strings that align with the values.\n        data_type: Ladybug data type for the data collection.\n        unit: Text for the unit of the collection.\n        time_offset: Python timedelta object to correct for the time zone.\n        year: Integer for the year of the data.\n    \"\"\"\n    if values == []:\n        return None\n\n    # convert date codes into datetimes and ensure no duplicates\n    leap_yr = True if year % 4 == 0 else False\n    datetimes = []\n    clean_values = []\n    for i, (dat, val) in enumerate(zip(dates, values)):\n        if dat != dates[i - 1]:\n            yr, month, day, hr, minute = int(dat[:4]), int(dat[5:7]), \\\n                int(dat[8:10]), int(dat[11:13]), int(dat[14:16])\n            py_dat = datetime.datetime(yr, month, day, hr, minute) + time_offset\n            if py_dat.year == year:\n                lb_dat = DateTime(py_dat.month, py_dat.day, py_dat.hour,\n                                  py_dat.minute, leap_year=leap_yr)\n                datetimes.append(lb_dat)\n                clean_values.append(val)\n\n    # make a discontinuous cata collection\n    data_header = Header(data_type, unit, AnalysisPeriod(is_leap_year=leap_yr))\n    data_init = HourlyDiscontinuousCollection(data_header, clean_values, datetimes)\n    data_final = data_init.validate_analysis_period()\n\n    # cull out unwanted timesteps.\n    if _timestep_:\n        data_final.convert_to_culled_timestep(_timestep_)\n    else:\n        data_final.convert_to_culled_timestep(1)\n\n    return data_final\n\n\nif all_required_inputs(ghenv.Component) and _run:\n    # check that the file exists.\n    assert os.path.isfile(_noaa_file), 'Cannot find file at {}.'.format(_noaa_file)\n\n    # extract the location and the time zone\n    location, t_zone = extract_location(_noaa_file, time_zone_)\n    t_offset = datetime.timedelta(seconds=t_zone * 3600)\n\n    # empty lists to be filled with data\n    all_years = []\n    all_dates = []\n    header_txt = []\n    db_t = []\n    db_t_dates = []\n    dp_t = []\n    dp_t_dates = []\n    ws = []\n    ws_dates = []\n    wd = []\n    wd_dates = []\n    sc = []\n    sc_dates = []\n    slp = []\n    slp_dates = []\n    vis = []\n    vis_dates = []\n    ceil = []\n    ceil_dates = []\n\n    # pull relevant data out of the file\n    with open(_noaa_file) as csv_file:\n        csv_reader = csv.reader(csv_file, delimiter=',', skipinitialspace=True)\n\n        # find the column with total sky cover if it exists\n        header = csv_reader.next()  # get header row\n        sc_col = None\n        for i, colname in enumerate(header):\n            if colname == 'GF1':\n                sc_col = i\n\n        for row in csv_reader:\n            # parse the dates and the years\n            date_row = row[1]\n            all_dates.append(date_row)\n            all_years.append(int(date_row[:4]))\n\n            # parse the wind information\n            wind_info = row[10].split(',')\n            if wind_info[0] != '999':\n                wd.append(float(wind_info[0]))\n                wd_dates.append(date_row)\n            if wind_info[3] != '9999':\n                ws.append(float(wind_info[3]) / 10)\n                ws_dates.append(date_row)\n\n            # parse the ceiling height information\n            ceil_info = row[11].split(',')\n            if ceil_info[0] != '99999':\n                ceil.append(float(ceil_info[0]))\n                ceil_dates.append(date_row)\n\n            # parse the visibility information\n            vis_info = row[12].split(',')\n            if vis_info[0] != '999999':\n                vis.append(float(vis_info[0]) / 1000)\n                vis_dates.append(date_row)\n\n            # parse the dry bulb and dew point information\n            temp_info = row[13].split(',')\n            if temp_info[0] != '+9999':\n                db_t.append(float(temp_info[0]) / 10)\n                db_t_dates.append(date_row)\n            dwpt_info = row[14].split(',')\n            if dwpt_info[0] != '+9999':\n                dp_t.append(float(dwpt_info[0]) / 10)\n                dp_t_dates.append(date_row)\n\n            # parse the pressure information\n            slp_info = row[15].split(',')\n            if slp_info[0] != '99999':\n                slp.append(float(slp_info[0]) * 10)\n                slp_dates.append(date_row)\n\n            # parse the sky cover info if it exists\n            if sc_col is not None and row[sc_col] != '':\n                sc_info = row[sc_col].split(',')\n                sc_oktas = int(sc_info[0])\n                sc_tenths = sc_oktas * (10 / 8) if sc_oktas != 9 else 10\n                sc.append(sc_tenths)\n                sc_dates.append(date_row)\n\n    # get the most predominant year in the file to make sure all data is for one year\n    dom_yr = int(max(set(all_years), key=all_years.count))\n    model_year = build_collection(\n        all_years, all_dates, GenericType('Years', 'yr'), 'yr', t_offset, dom_yr)\n\n    # build data collections from the imported values\n    dry_bulb_temp = build_collection(\n        db_t, db_t_dates, DryBulbTemperature(), 'C', t_offset, dom_yr)\n    dew_point_temp = build_collection(\n        dp_t, dp_t_dates, DewPointTemperature(), 'C', t_offset, dom_yr)\n    wind_speed = build_collection(\n        ws, ws_dates, WindSpeed(), 'm/s', t_offset, dom_yr)\n    wind_direction = build_collection(\n        wd, wd_dates, WindDirection(), 'degrees', t_offset, dom_yr)\n    ceiling_height = build_collection(\n        ceil, ceil_dates, CeilingHeight(), 'm', t_offset, dom_yr)\n    visibility = build_collection(\n        vis, vis_dates, Visibility(), 'km', t_offset, dom_yr)\n    atmos_pressure = build_collection(\n        slp, slp_dates, AtmosphericStationPressure(), 'Pa', t_offset, dom_yr)\n    total_sky_cover = build_collection(\n        sc, sc_dates, TotalSkyCover(), 'tenths', t_offset, dom_yr)\n", 
  "category": "Dragonfly", 
  "name": "DF Import NOAA File", 
  "description": "Import climate data from a .csv file of annual data obtained from the National\nOceanic and Atmospheric Administration (NOAA) database.  The database can be\naccessed here:\nhttps://gis.ncdc.noaa.gov/maps/ncei/cdo/hourly\n-"
}