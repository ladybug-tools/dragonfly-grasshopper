{
  "version": "1.6.0", 
  "nickname": "Rejoin", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "buildings", 
        "description": "Dragonfly Buildings containing the input Room2Ds. This may be multiple\nbuildings when the input Room2Ds originally had several different\nparent buildings.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_room2ds", 
      "description": "A list of Dragonfly Room2D objects to be re-joined into Buildings.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Create", 
  "code": "\ntry:  # import the core dragonfly dependencies\n    from dragonfly.building import Building\n    from dragonfly.story import Story\n    from dragonfly.room2d import Room2D\n    from dragonfly.colorobj import ColorRoom2D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, give_warning, \\\n        document_counter\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # duplicate the initial objects\n    room2ds = []\n    for rm in _room2ds:\n        assert isinstance(rm, Room2D), 'Expected Room2D. Got {}.'.format(type(rm))\n        room2ds.append(rm.duplicate())\n\n    # organize the rooms into a nested dictionary by story/building\n    orphaned_rooms = []\n    org_dict, bldg_dict = {}, {}\n    for rm in room2ds:\n        if rm.has_parent and rm.parent.has_parent:\n            story = rm.parent\n            bldg = story.parent\n            if bldg.identifier not in bldg_dict:\n                bldg_dict[bldg.identifier] = bldg\n                org_dict[bldg.identifier] = {}\n            try:\n                org_dict[bldg.identifier][story.identifier].append(rm)\n            except KeyError:\n                org_dict[bldg.identifier][story.identifier] = [rm]\n        else:\n            orphaned_rooms.append(rm)\n\n    # re-generate the Buildings and add the new Room2Ds\n    buildings = []\n    for bldg in bldg_dict.values():\n        new_bldg = bldg.duplicate()\n        for story in new_bldg:\n            try:\n                rm_2ds = org_dict[bldg.identifier][story.identifier]\n                story._room_2ds = ()\n                story.add_room_2ds(rm_2ds)\n            except KeyError:  # story missing from the input and we'll use the old ones\n                pass\n        buildings.append(new_bldg)\n\n    # if there were orphaned Room2Ds, add them to their own building\n    if len(orphaned_rooms) != 0:\n        # give a warning about the orphaned Room2Ds\n        display_name = 'Building_{}'.format(document_counter('bldg_count'))\n        name = clean_and_id_string(display_name)\n        msg = '{} of the input Room2Ds were not a part of an original Dragonfly ' \\\n            'Building.\\nThey have been added to a new Building with the auto-generated ' \\\n            'name \"{}\"\\nBetter practice is to add these Room2Ds to new Stories and ' \\\n            'then a Building.'.format(len(orphaned_rooms), display_name)\n        give_warning(ghenv.Component, msg)\n        # create the stories and the building\n        color_obj = ColorRoom2D(orphaned_rooms, 'floor_height')\n        story_groups = [[] for val in values]\n        values = color_obj.attributes_unique\n        for atr, room in zip(color_obj.attributes, in_rooms):\n            atr_i = values.index(atr)\n            story_groups[atr_i].append(room)\n        stories = [Story('{}_Story{}'.format(name, i), r_group)\n                   for i, r_group in enumerate(story_groups)]\n        o_building = Building(name, stories)\n        o_building.display_name = display_name\n        buildings.append(o_building)\n", 
  "category": "Dragonfly", 
  "name": "DF Rejoin to Building", 
  "description": "Rejoin a list of Room2Ds that were originally a part of a Building back to a new\nBuilding with updated Room2Ds.\n_\nIn the event that the input contains Room2Ds that were not a part of an original\nBuilding, this component can still be used but the stories will be regenerated\nbased on the Room2D floor elevations and a warning will be given.\n-"
}