{
  "version": "1.4.0", 
  "nickname": "RunOpenDSS", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "buildings", 
        "description": "A list of CSV files containing the voltage and over/under voltage\nresults of the simulation at each timestep. There is one CSV per\nbuilding in the dragonfly model. These can be imported with the\n\"DF Read OpenDSS Result\" component.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "connectors", 
        "description": "A list of CSV result files containing the power line loading and\noverloading results of the simulation at each timestep.\nThere is one CSV per electrical connector in the network. These can\nbe imported with the \"DF Read OpenDSS Result\" component.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "transformers", 
        "description": "A list of CSV result files containing the transformer loading and\noverloading results of the simulation at each timestep.\nThere is one CSV per transformer in the network. These can be\nimported with the \"DF Read OpenDSS Result\" component.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_geojson", 
      "description": "The path to an URBANopt-compatible geoJSON file. This geoJSON\nfile can be obtained form the \"DF Model to geoJSON\" component.\nThe geoJSON must have a valid Electrical Network assigned to it\nin order to run correctly through OpenDSS.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_scenario", 
      "description": "The path to an URBANopt .csv file for the scenario. This CSV\nfile can be obtained form the \"DF Run URBANopt\" component.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run_period_", 
      "description": "A ladybyg AnalysisPeriod object to describe the time period\nover which to run the simulation. The default is to run the simulation\nfor the whole EnergyPlus run period.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to \"True\" to run the geojson and scenario through OpenDSS.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Energy", 
  "code": "\nimport os\nimport subprocess\nimport json\n\ntry:\n    from honeybee.config import folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the dragonfly_energy dependencies\n    from dragonfly_energy.run import run_default_report\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly_energy:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.download import download_file_by_name\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component) and _run:\n    # check to see if the urbanopt-ditto-reader is installed\n    shell = False if os.name == 'nt' else True\n    ext = '.exe' if os.name == 'nt' else ''\n    uo_ditto = '{}/ditto_reader_cli{}'.format(folders.python_scripts_path, ext)\n    if not os.path.isfile(uo_ditto):  # run the pip install command\n        pip_cmd = '\"{py_exe}\" -m pip install urbanopt-ditto-reader==0.3.8'.format(\n            py_exe=folders.python_exe_path)\n        process = subprocess.Popen(pip_cmd, stderr=subprocess.PIPE, shell=shell)\n        stderr = process.communicate()\n\n    # generate the default scenario report\n    run_default_report(_geojson, _scenario)\n\n    # prepare the opendss-running command\n    command = '\"{uo_ditto}\" run-opendss -f \"{feature_file}\" ' \\\n        '-s \"{scenario_file}\" -e \"{equipment_file}\"'.format(\n            uo_ditto=uo_ditto, feature_file=_geojson, scenario_file=_scenario,\n            equipment_file=os.path.join(os.path.dirname(_geojson), 'electrical_database.json')\n        )\n    if _run_period_ is not None:\n        st_dt = '2006/{}'.format(_run_period_.st_time.strftime('%m/%d %H:%M:%S'))\n        end_dt = '2006/{}'.format(_run_period_.end_time.strftime('%m/%d %H:%M:%S'))\n        command = '{} -b \"{}\" -n \"{}\"'.format(command, st_dt, end_dt)\n\n    # execute the command to run everything through OpenDSS\n    process = subprocess.Popen(command, stderr=subprocess.PIPE, shell=shell)\n    stderr = process.communicate()\n\n    # gather together all of the result files\n    scen_name = os.path.basename(_scenario).replace('.csv', '')\n    run_folder = os.path.join(os.path.dirname(_geojson), 'run', scen_name)\n    result_folder = os.path.join(run_folder, 'opendss')\n    bldg_folder = os.path.join(result_folder, 'results', 'Features')\n    conn_folder = os.path.join(result_folder, 'results', 'Lines')\n    trans_folder = os.path.join(result_folder, 'results', 'Transformers')\n    if os.path.isdir(bldg_folder):\n        buildings = [os.path.join(bldg_folder, file) for file in os.listdir(bldg_folder)]\n        connectors = [os.path.join(conn_folder, file) for file in os.listdir(conn_folder)]\n        transformers = [os.path.join(trans_folder, file) for file in os.listdir(trans_folder)]\n", 
  "category": "Dragonfly", 
  "name": "DF Run OpenDSS", 
  "description": "Run a an URBANopt geoJSON and scenario through OpenDSS.\n_\nThe geoJSON must have a valid Electrical Network assigned to it in order to\nrun correctly through OpenDSS.\n-"
}