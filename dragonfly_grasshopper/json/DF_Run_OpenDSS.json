{
  "version": "1.6.1", 
  "nickname": "RunOpenDSS", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "buildings", 
        "description": "A list of CSV files containing the voltage and over/under voltage\nresults of the simulation at each timestep. There is one CSV per\nbuilding in the dragonfly model. These can be imported with the\n\"DF Read OpenDSS Result\" component.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "connectors", 
        "description": "A list of CSV result files containing the power line loading and\noverloading results of the simulation at each timestep.\nThere is one CSV per electrical connector in the network. These can\nbe imported with the \"DF Read OpenDSS Result\" component.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "transformers", 
        "description": "A list of CSV result files containing the transformer loading and\noverloading results of the simulation at each timestep.\nThere is one CSV per transformer in the network. These can be\nimported with the \"DF Read OpenDSS Result\" component.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_geojson", 
      "description": "The path to an URBANopt-compatible geoJSON file. This geoJSON\nfile can be obtained form the \"DF Model to geoJSON\" component.\nThe geoJSON must have a valid Electrical Network assigned to it\nin order to run correctly through OpenDSS.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_scenario", 
      "description": "The path to an URBANopt .csv file for the scenario. This CSV\nfile can be obtained form the \"DF Run URBANopt\" component.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run_period_", 
      "description": "A ladybyg AnalysisPeriod object to describe the time period\nover which to run the simulation. The default is to run the simulation\nfor the whole EnergyPlus run period.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "autosize_", 
      "description": "A boolean to note whether undersized transformers should be\nautomatically resized to meet demand over the course of\nthe simulation. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to \"True\" to run the geojson and scenario through OpenDSS.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Energy", 
  "code": "\nimport os\nimport subprocess\nimport json\n\ntry:\n    from ladybug.futil import nukedir\n    from ladybug.config import folders as lb_folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee.config import folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the dragonfly_energy dependencies\n    from dragonfly_energy.run import run_default_report\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly_energy:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.download import download_file_by_name\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\nUO_DITTO_VERSION = '0.5.1'\n\n\nif all_required_inputs(ghenv.Component) and _run:\n    # check to see if the urbanopt-ditto-reader is installed\n    ext = '.exe' if os.name == 'nt' else ''\n    uo_ditto = '{}/ditto_reader_cli{}'.format(folders.python_scripts_path, ext)\n    uo_ditto_pack = '{}/urbanopt_ditto_reader-{}.dist-info'.format(\n        folders.python_package_path, UO_DITTO_VERSION)\n    if not os.path.isfile(uo_ditto) or not os.path.isdir(uo_ditto_pack):\n        executor_path = os.path.join(\n            lb_folders.ladybug_tools_folder, '{{plugin}}',\n            'ladybug_{{plugin}}_dotnet', 'Ladybug.Executor.exe')\n        if os.name == 'nt' and os.path.isfile(executor_path) and \\\n                'Program Files' in executor_path:\n            pip_cmd = [\n                executor_path, folders.python_exe_path,\n                '-m pip install urbanopt-ditto-reader=={}'.format(UO_DITTO_VERSION)\n            ]\n        else:\n            pip_cmd = '\"{py_exe}\" -m pip install urbanopt-ditto-reader=={uo_ver}'.format(\n                py_exe=folders.python_exe_path, uo_ver=UO_DITTO_VERSION)\n        shell = True if os.name == 'nt' else False\n        process = subprocess.Popen(pip_cmd, stderr=subprocess.PIPE, shell=shell)\n        stderr = process.communicate()\n\n    # generate the default scenario report\n    def_report = os.path.join(os.path.dirname(_geojson), 'run',\n                              'honeybee_scenario', 'default_scenario_report.csv')\n    if not os.path.isfile(def_report):\n        run_default_report(_geojson, _scenario)\n\n    # delete any existing files in the result folder\n    scen_name = os.path.basename(_scenario).replace('.csv', '')\n    run_folder = os.path.join(os.path.dirname(_geojson), 'run', scen_name)\n    result_folder = os.path.join(run_folder, 'opendss')\n    nukedir(result_folder)\n\n    # prepare the opendss-running command\n    command = '\"{uo_ditto}\" run-opendss -f \"{feature_file}\" ' \\\n        '-s \"{scenario_file}\"'.format(\n            uo_ditto=uo_ditto, feature_file=_geojson, scenario_file=_scenario)\n\n    # check if this is an RNM simulation\n    rnm_results = os.path.join(\n        os.path.dirname(_geojson), 'run', 'honeybee_scenario', 'rnm-us',\n        'results', 'GeoJSON', 'Distribution_system.json')\n    if os.path.isfile(rnm_results):\n        command = '{} --rnm'.format(command)\n    else:  # include the equipment file written by dragonfly-energy\n        command = '{} -e \"{}\"'.format(\n            command, os.path.join(os.path.dirname(_geojson), 'electrical_database.json'))\n\n    # add the other options into the command\n    if _run_period_ is not None:\n        # first, format the run period dates for the command\n        st_dt = '2006/{}'.format(_run_period_.st_time.strftime('%m/%d'))\n        end_dt = '2006/{}'.format(_run_period_.end_time.add_hour(24).strftime('%m/%d'))\n        command = '{} -a \"{}\" -n \"{}\"'.format(command, st_dt, end_dt)\n        # try to sense the timestep from the simulation parameter file\n        timestep = 6  # assume the default timestep in case no file is found\n        sim_par_json = os.path.join(os.path.dirname(_geojson), 'simulation_parameter.json')\n        if os.path.isfile(sim_par_json):\n            with open(sim_par_json, 'r') as spj:\n                sim_par = json.load(spj)\n            if 'timestep' in sim_par:\n                timestep = sim_par['timestep']\n        # using the simulation timestep, specify the correct start and end time\n        if timestep == 1:\n            command = '{} -b 01:00:00 -d 00:00:00'.format(command)\n        else:\n            st_min = str(int(60 / timestep))\n            st_min = '0{}'.format(st_min) if len(st_min) == 1 else st_min\n            command = '{} -b 00:():00 -d 00:00:00'.format(command, st_min)\n    if autosize_:\n        command = '{} --upgrade'.format(command)\n\n    # execute the command to run everything through OpenDSS\n    shell = False if os.name == 'nt' else True\n    process = subprocess.Popen(command, stderr=subprocess.PIPE, shell=shell)\n    stderr = process.communicate()\n\n    # gather together all of the result files\n    bldg_folder = os.path.join(result_folder, 'results', 'Features')\n    conn_folder = os.path.join(result_folder, 'results', 'Lines')\n    trans_folder = os.path.join(result_folder, 'results', 'Transformers')\n    if os.path.isdir(bldg_folder):\n        buildings = [os.path.join(bldg_folder, file) for file in os.listdir(bldg_folder)]\n        connectors = [os.path.join(conn_folder, file) for file in os.listdir(conn_folder)]\n        transformers = [os.path.join(trans_folder, file) for file in os.listdir(trans_folder)]\n    else:\n        msg = 'Failed to run the OpenDSS simulation.\\nMake sure that your ' \\\n            'GeoJSON has an Electrical Network object in it\\nor, if the GeoJSON has '\\\n            'a Road Network object in it, the \"Run RNM\" component\\ncan be used to ' \\\n            'generate an Electrical Network that can be simulated in OpenDSS.'\n        print(msg)\n        raise ValueError(msg)\n", 
  "category": "Dragonfly", 
  "name": "DF Run OpenDSS", 
  "description": "Run a an URBANopt geoJSON and scenario through OpenDSS.\n_\nThe geoJSON must have a valid Electrical Network assigned to it in order to\nrun correctly through OpenDSS.\n-"
}