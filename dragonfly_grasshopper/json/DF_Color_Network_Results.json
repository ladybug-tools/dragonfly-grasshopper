{
  "version": "1.9.0", 
  "nickname": "ColorNetResults", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "vis_geo", 
        "description": "Meshes and line segments colored according to the results.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "legend", 
        "description": "Geometry representing the legend for colored objects.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "title", 
        "description": "A text object for the global title.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "values", 
        "description": "A list of values that align with the input substation, transformers\nand electrical connectors. These note the value assigned\nto each object.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "colors", 
        "description": "A list of colors that align with the input substation, transformers\nand electrical connectors. These note the color of each object in\nthe Rhino scene.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_data", 
      "description": "A list of data collections of the same data type, which will be used\nto color the network with simulation results. These should come\nfrom the \"DF Read OpenDSS Result\" component.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_network", 
      "description": "A Dragonfly Electrical Newtork object to be colored with results\nin the Rhino scene.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "sim_step_", 
      "description": "An optional integer (greater than or equal to 0) to select\na specific step of the data collections for which result values will be\ngenerated. If None, the geometry will be colored with the maximum\nof resutls in the _data, essentially describing the peak\ncondition. (Default: None).", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "period_", 
      "description": "A Ladybug analysis period to be applied to all of the input _data.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "legend_par_", 
      "description": "An optional LegendParameter object to change the display\nof the colored output. (Default: None).", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "4 :: Electric Grid", 
  "code": "\ntry:  # import the ladybug_geometry dependencies\n    from ladybug_geometry.geometry2d import Polygon2D, Polyline2D, LineSegment2D\n    from ladybug_geometry.geometry3d import Face3D, Point3D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_geometry:\\n\\t{}'.format(e))\n\ntry:  # import the core dragonfly dependencies\n    from dragonfly_energy.opendss.colorobj import ColorNetworkResults\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly_energy:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.fromgeometry import from_face3ds_to_colored_mesh, \\\n        from_polyline2d, from_linesegment2d\n    from ladybug_{{cad}}.colorize import ColoredPolyline, ColoredLine\n    from ladybug_{{cad}}.text import text_objects\n    from ladybug_{{cad}}.fromobjects import legend_objects\n    from ladybug_{{cad}}.color import color_to_color\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, schedule_solution\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # apply analysis period to the data if connected\n    if period_ is not None:\n        _data = [coll.filter_by_analysis_period(period_) for coll in _data]\n\n    # create the ColorNetwork visualization object and output geometry\n    sim_step = 'max' if sim_step_ is None else sim_step_\n    color_obj = ColorNetworkResults(_data, _network, legend_par_, sim_step)\n    graphic = color_obj.graphic_container\n    vis_geo = []\n    for geo_obj, col in zip(color_obj.matched_geometries, graphic.value_colors):\n        if isinstance(geo_obj, Polygon2D):\n            face_obj = Face3D([Point3D(pt.x, pt.y, 0) for pt in geo_obj.vertices])\n            vis_geo.append(from_face3ds_to_colored_mesh([face_obj], col))\n        elif isinstance(geo_obj, Polyline2D):\n            col_line = ColoredPolyline(from_polyline2d(geo_obj))\n            col_line.color = color_to_color(col)\n            col_line.thickness = 3\n            vis_geo.append(col_line)\n        elif isinstance(geo_obj, LineSegment2D):\n            col_line = ColoredLine(from_linesegment2d(geo_obj))\n            col_line.color = color_to_color(col)\n            col_line.thickness = 3\n            vis_geo.append(col_line)\n    legend = legend_objects(graphic.legend)\n    title = text_objects(color_obj.title_text, graphic.lower_title_location,\n                         graphic.legend_parameters.text_height,\n                         graphic.legend_parameters.font)\n    values = color_obj.matched_values\n    colors = [color_to_color(col) for col in graphic.value_colors]\n    schedule_solution(ghenv.Component, 2)", 
  "category": "Dragonfly", 
  "name": "DF Color Network Results", 
  "description": "Color a Dragonfly ElectricalNewtwork in the Rhino scene with OpenDSS simulation\nresults.\n-"
}