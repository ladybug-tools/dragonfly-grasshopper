{
  "version": "1.8.0", 
  "nickname": "GHEDesigner", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "input_json", 
        "description": "Path to the JSON file that was used to specify inputs for the GHEDesigner.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "boreholes", 
        "description": "A list of points for the borehole locations within the _site.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "g_function", 
        "description": "A data tree of G-function coefficients that describe the response\nof the ground to the input loads. Each pair of factors represents\na point on the G-function. Flattening this data tree enables you\nto plug it directly into the \"Ironbug Ground Heat Sxchanger Vertical\"\ncomponent to simulate the ground heat exchanger in EnergyPlus.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "properties", 
        "description": "A list of peroperties that can be plugged into the parameters of the\n\"Ironbug Ground Heat Sxchanger Vertical\" component. The properties are\nin the following order:\n_\n* Borehole Length\n* Borehole Radius\n* Design Flow Rate\n* Ground Temperature\n* Ground Conductivity\n* Ground Heat Capacity\n* Grout Conductivity\n* Number of Boreholes\n* Pipe Outer Diameter\n* Pipe Conductivity\n* Pipe Thickness\n* U Tube Distance", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_load", 
      "description": "An annual data collection of hourly loads on the ground in Watts.\nThese are the heat extraction and heat rejection loads of the\nground heat exchanger and should already account for factors\nlike additional heat added or removed by the heat pump compressors.\nPositive values indicate heat extraction, negative values indicate\nheat rejection.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_site", 
      "description": "A list of horizontal Rhino surfaces representing a footprint of the site\nto be populated with boreholes. These surfaces can have holes in them\nand these holes will be excluded from borehole placement.", 
      "type": "Brep", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_borehole_", 
      "description": "A GHE BoreholeParameter object from the \"DF GHE Borehole Parameters\"\ncomponent, which customizes properties like borehole min/max depth\nand borehole min/max spacing.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_soil_", 
      "description": "A GHE SoilParameter object from the \"DF GHE Soil Parameters\" component.\nThis can be used to customize the conductivity and density of the\nsoil as well as the grout that fills the borehole.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_fluid_", 
      "description": "A GHE Fluid object from the \"DF GHE Fluid Parameters\" component.\nThis can be used to customize the fuild used (eg. water, glycol)\nas well as the concentration of the fluid. (Default: 100% Water).", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_pipe_", 
      "description": "A GHEPipe object from the \"DF GHE Pipe Parameters\" component.\nThis can be used to customize the pipe diameter, conductivty,\nand roughness.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_design_", 
      "description": "A GHEDesign object from the \"DF GHE Design\" component. This can be\nused to customize the mina and max entering fluid temperatures\nas well as the max boreholes.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_write", 
      "description": "Set to \"True\" to run the component, install any missing dependencies,\nand write the input JSON for GHEDesigner.", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "run_", 
      "description": "Set to \"True\" to run GHEDesigner once the JSON is written. This will\nensure that all result files appear in their respective outputs\nfrom this component.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "5 :: District Thermal", 
  "code": "\nimport os\nimport subprocess\nimport json\n\ntry:\n    from ladybug_geometry.geometry2d import Point2D\n    from ladybug_geometry.geometry3d import Point3D\n    from ladybug_geometry.bounding import bounding_rectangle\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug.config import folders as lb_folders\n    from ladybug.futil import nukedir\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee.config import folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:\n    from dragonfly_energy.des.loop import {{PLGN}}EThermalLoop\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly_energy:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.config import conversion_to_meters, tolerance\n    from ladybug_{{cad}}.togeometry import to_face3d\n    from ladybug_{{cad}}.fromgeometry import from_point2d\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, give_warning, \\\n        list_to_data_tree\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n{{PLGN}}E_DESIGNER_VERSION = '1.5'\n\nPROPERTY_NAMES = (\n    'Borehole Length (m)',\n    'Borehole Radius (m)',\n    'Design Flow Rate (m3/s)',\n    'Ground Temperature (C)',\n    'Ground Conductivity (W/m-K)',\n    'Ground Heat Capacity (J/m3-K)',\n    'Grout Conductivity (W/m-K)',\n    'Number of Boreholes',\n    'Pipe Outer Diameter (m)',\n    'Pipe Conductivity (W/m-K)',\n    'Pipe Thickness (m)',\n    'U Tube Distance (m)'\n)\nPROPERTY_PATHS = (\n    ('result', 'ghe_system', 'active_borehole_length', 'value'),\n    ('result', 'ghe_system', 'borehole_diameter', 'value'),\n    ('input', 'design', 'flow_rate'),\n    ('result', 'ghe_system', 'soil_undisturbed_ground_temp', 'value'),\n    ('result', 'ghe_system', 'soil_thermal_conductivity', 'value'),\n    ('result', 'ghe_system', 'soil_volumetric_heat_capacity', 'value'),\n    ('result', 'ghe_system', 'grout_thermal_conductivity', 'value'),\n    ('result', 'ghe_system', 'total_drilling', 'value'),\n    ('result', 'ghe_system', 'pipe_geometry', 'pipe_outer_diameter', 'value'),\n    ('result', 'ghe_system', 'pipe_thermal_conductivity', 'value'),\n    ('result', 'ghe_system', 'pipe_geometry', 'pipe_inner_diameter', 'value'),\n    ('result', 'ghe_system', 'shank_spacing', 'value')\n)\n\n\nif all_required_inputs(ghenv.Component) and _write:\n    # set up the custom python environment\n    custom_env = os.environ.copy()\n    custom_env['PYTHONHOME'] = ''\n    shell = True if os.name == 'nt' else False\n\n    # set global values\n    ext = '.exe' if os.name == 'nt' else ''\n    executor_path = os.path.join(\n        lb_folders.ladybug_tools_folder, '{{plugin}}',\n        'ladybug_{{plugin}}_dotnet', 'Ladybug.Executor.exe')\n\n    # check to see if {{PLGN}}EDesigner is installed\n    ghe_des = '{}/ghedesigner{}'.format(folders.python_scripts_path, ext)\n    ghe_des_pack = '{}/{{PLGN}}EDesigner-{}.dist-info'.format(\n        folders.python_package_path, {{PLGN}}E_DESIGNER_VERSION)\n    if not os.path.isfile(ghe_des) or not os.path.isdir(ghe_des_pack):\n        install_cmd = 'pip install ghedesigner=={}'.format({{PLGN}}E_DESIGNER_VERSION)\n        if os.name == 'nt' and os.path.isfile(executor_path) and \\\n                'Program Files' in executor_path:\n            pip_cmd = [\n                executor_path, folders.python_exe_path, '-m {}'.format(install_cmd)\n            ]\n        else:\n            pip_cmd = '\"{py_exe}\" -m {uo_cmd}'.format(\n                py_exe=folders.python_exe_path, uo_cmd=install_cmd)\n        process = subprocess.Popen(\n            pip_cmd, stderr=subprocess.PIPE, shell=shell, env=custom_env)\n        stderr = process.communicate()\n\n    # process the site geometry into Face3D\n    site_faces = []\n    for brep in _site:\n        site_faces.extend(to_face3d(brep))\n    conv_factor = conversion_to_meters()\n    for i, face in enumerate(site_faces):\n        site_faces[i] = face.scale(conv_factor)\n    # {{PLGN}}EDesigner treats negative values as invalid\n    # ensure coordinate values are positive\n    min_pt, max_pt = bounding_rectangle(site_faces)\n    move_vec_2d = Point2D(0, 0) - min_pt\n    move_vec_3d = Point3D(move_vec_2d.x, move_vec_2d.y, 0)\n    for i, face in enumerate(site_faces):\n        site_faces[i] = face.move(move_vec_3d)\n\n    # create the input dict for {{PLGN}}EDesigner\n    ghe_dict = {{PLGN}}EThermalLoop.ghe_designer_dict(\n        _load, site_faces, _soil_, _fluid_, _pipe_, _borehole_, _design_, tolerance)\n    ghe_dict['version'] = {{PLGN}}E_DESIGNER_VERSION\n\n    # write the dict to a JSON in the simulation folder\n    sim_folder = os.path.join(folders.default_simulation_folder, '{{PLGN}}EDesigner')\n    nukedir(sim_folder)\n    if not os.path.isdir(sim_folder):\n        os.makedirs(sim_folder)\n    input_json = os.path.join(sim_folder, 'ghe_input.json')\n    with open(input_json, 'w') as inf:\n        json.dump(ghe_dict, inf, indent=4)\n\n    # execute {{PLGN}}EDesigner\n    if run_:\n        # execute the command to run everything through {{PLGN}}EDesigner\n        command = '\"{ghe_des}\" \"{input_json}\" \"{sim_folder}\"'.format(\n            ghe_des=ghe_des, input_json=input_json, sim_folder=sim_folder)\n        process = subprocess.Popen(\n            command, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            shell=shell, env=custom_env)\n        result = process.communicate()\n        # parse the result files\n        bore_file = input_json = os.path.join(sim_folder, 'BoreFieldData.csv')\n        g_func_file = input_json = os.path.join(sim_folder, 'Gfunction.csv')\n        summary_file = input_json = os.path.join(sim_folder, 'SimulationSummary.json')\n        # if the simulation failed, give a warning\n        if not os.path.isfile(bore_file):\n            give_warning(ghenv.Component, result[0])\n            print(result[0])\n            print(result[1])\n        else:  # parse the result files\n            with open(bore_file, 'r') as bf:\n                borehole_data = bf.readlines()\n            move_vec_rev = move_vec_2d.reverse()\n            boreholes = []\n            for pt in borehole_data[1:]:\n                boreholes.append(Point2D(*(float(c) for c in pt.split(','))))\n            boreholes = [from_point2d(pt.move(move_vec_rev)) for pt in boreholes]\n\n            with open(g_func_file, 'r') as gf:\n                g_function = gf.readlines()\n            g_function = [[float(v) for v in line.split(',')[:2]] for line in g_function[1:]]\n            g_function = list_to_data_tree(g_function)\n\n            with open(summary_file, 'r') as sf:\n                summary_data = json.load(sf)\n            properties = []\n            for p_name, p_path in zip(PROPERTY_NAMES, PROPERTY_PATHS):\n                val = summary_data[p_path[1]] if p_path[0] == 'result' else ghe_dict[p_path[1]]\n                for key in p_path[2:]:\n                    val = val[key]\n                if '(J/m3-K)' in p_name:\n                    val = val * 0.001\n                if 'Borehole Radius' in p_name:\n                    val = val * 0.5\n                if 'Number of Boreholes' in p_name:\n                    val = int(val / properties[0])\n                properties.append(val)\n            properties[-2] = properties[-4] - properties[-2]\n            print('\\n'.join('{}: {}'.format(name, val) for name, val in zip(PROPERTY_NAMES, properties)))\n", 
  "category": "Dragonfly", 
  "name": "DF GHE Designer", 
  "description": "Run a GHE Designer simulation to size a ground heat exchanger (GHE) and produce a\nG-function that can be used in EnergyPlus/IronBug simulations.\n_\nThe GHE sizing requires a data collection of building loads, a site polygon where\nboreholes can be placed, and geometric constraints about the spacing and depth\nof the boreholes.\n-"
}