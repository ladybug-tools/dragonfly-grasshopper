{
  "version": "1.6.0", 
  "nickname": "ModelUWG", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "model", 
        "description": "The input Dragonfly Model with its UWG properties re-assigned based\non the input.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_model", 
      "description": "A Dragonfly Model which is to have its Urban Weather Generator (UWG)\nproperties assigned.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_terrain_", 
      "description": "A Terrain object that dictates the properties of the street and\nground beneath the buildings. If None, a default terrain object will be\ngenerated by analysing all of the buildings in the Model and drawing\na bounding rectangle in the XY plane around them.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_traffic_", 
      "description": "A TrafficPararameter object that defines the activity and intensity\nof traffic within the urban street canyons. If None, traffic\nintensity will be approximated using the average building\nstory count along with a generic traffic schedule.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "tree_cover_", 
      "description": "A number from 0 to 1 that defines the fraction of the exposed\nterrain covered by trees. If None, it will be determined by\nevaluating the horizontal area of all ContextShade geometry\nthat has a true is_vegetation property.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "grass_cover_", 
      "description": "A number from 0 to 1 that defines the fraction of the exposed\nterrain that is covered by grass or shrubs. If None, no grass will\nbe assumed for the urban area.", 
      "type": "double", 
      "default": null
    }
  ], 
  "subcategory": "4 :: AlternativeWeather", 
  "code": "\ntry:  # import the dragonfly dependencies\n    from dragonfly.model import Model\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # check and duplicate the input\n    assert isinstance(_model, Model), \\\n        'Expected Dragonfly Model. Got {}.'.format(type(_model))\n    model = _model.duplicate()\n\n    # assign any of the input properties\n    if _terrain_ is not None:\n        model.properties.uwg.terrain = _terrain_\n    if _traffic_ is not None:\n        model.properties.uwg.traffic = _traffic_\n    if tree_cover_ is not None:\n        model.properties.uwg.tree_coverage_fraction = tree_cover_\n    if grass_cover_ is not None:\n        model.properties.uwg.grass_coverage_fraction = grass_cover_\n\n    # print some useful information about the model\n    print('{} m - average height'.format(\n        round(model.average_height_above_ground, 1)))\n    print('{} - footprint density'.format(\n        round(model.properties.uwg.footprint_density, 2)))\n    print('{} - facade to site'.format(\n        round(model.properties.uwg.facade_to_site, 2)))\n    print('{} - tree cover'.format(\n        round(model.properties.uwg.tree_coverage_fraction, 2)))\n    print('{} - grass cover'.format(\n        round(model.properties.uwg.grass_coverage_fraction, 2)))\n", 
  "category": "Dragonfly", 
  "name": "DF Assign Model UWG Properties", 
  "description": "Edit the properties of a Dragonfly Model that affect simulation with to the Urban\nWeather Generator (UWG).\n-"
}