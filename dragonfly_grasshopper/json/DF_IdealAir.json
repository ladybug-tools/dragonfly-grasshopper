{
  "version": "1.1.1", 
  "nickname": "DFIdealAir", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "df_objs", 
        "description": "The input Dragonfly object with the custom Ideal Air System assigned.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_df_objs", 
      "description": "Dragonfly Buildings, Stories or Room2Ds to which the input ideal\nair properties will be assigned. This can also be an etire\ndragonfly Model.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_economizer_", 
      "description": "Text to indicate the type of air-side economizer used on\nthe ideal air system. Economizers will mix in a greater amount of\noutdoor air to cool the zone (rather than running the cooling system)\nwhen the zone needs cooling and the outdoor air is cooler than the zone.\nChoose from the options below. Default: DifferentialDryBulb.\n* NoEconomizer\n* DifferentialDryBulb\n* DifferentialEnthalpy", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "dcv_", 
      "description": "Boolean to note whether demand controlled ventilation should be\nused on the system, which will vary the amount of ventilation air\naccording to the occupancy schedule of the zone. Default: False.", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "sensible_hr_", 
      "description": "A number between 0 and 1 for the effectiveness of sensible\nheat recovery within the system. Default: 0.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "latent_hr_", 
      "description": "A number between 0 and 1 for the effectiveness of latent heat\nrecovery within the system. Default: 0.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_heat_temp_", 
      "description": "A number for the maximum heating supply air temperature\n[C]. Default: 50, which is typical for many air-based HVAC systems.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_cool_temp_", 
      "description": "A number for the minimum cooling supply air temperature\n[C]. Default: 13, which is typical for many air-based HVAC systems.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_heat_limit_", 
      "description": "A number for the maximum heating capacity in Watts. This\ncan also be the text 'autosize' to indicate that the capacity should\nbe determined during the EnergyPlus sizing calculation. This can also\nbe the text 'NoLimit' to indicate no upper limit to the heating\ncapacity. Default: 'autosize'.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_cool_limit_", 
      "description": "A number for the maximum cooling capacity in Watts. This\ncan also be the text 'autosize' to indicate that the capacity should\nbe determined during the EnergyPlus sizing calculation. This can also\nbe the text 'NoLimit' to indicate no upper limit to the cooling\ncapacity. Default: 'autosize'.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Energy", 
  "code": "\n\ntry:  # import the honeybee extension\n    from honeybee.altnumber import autosize, no_limit\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the honeybee-energy extension\n    from honeybee_energy.hvac.idealair import IdealAirSystem\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\ntry:  # import the core dragonfly dependencies\n    from dragonfly.model import Model\n    from dragonfly.building import Building\n    from dragonfly.story import Story\n    from dragonfly.room2d import Room2D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly:\\n\\t{}'.format(e))\n\ntry:  # import the dragonfly-energy extension\n    import dragonfly_energy\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly_energy energy:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n# dictionary to get alterante number types\nalt_numbers = {\n    'nolimit': no_limit,\n    'NoLimit': no_limit,\n    'autosize': autosize,\n    'Autosize': autosize,\n    None: autosize\n    }\n\n\ndef extract_room2ds(obj):\n    \"\"\"Get all of the Room2Ds assinged to a given dragonfly object.\"\"\"\n    if isinstance(obj, Building):\n        return obj.unique_room_2ds\n    elif isinstance(obj, Story):\n        return obj.room_2ds\n    elif isinstance(obj, Room2D):\n        return [obj]\n    elif isinstance(obj, Model):\n        return [room for bldg in obj.buildings for room in bldg.unique_room_2ds]\n    else:\n        raise ValueError(\n            'Expected Dragonfly Room2D, Story, Building, or Model. '\n            'Got {}.'.format(type(hb_obj)))\n\n\nif all_required_inputs(ghenv.Component):\n    # duplicate the initial objects\n    df_objs = [obj.duplicate() for obj in _df_objs]\n\n    for df_obj in df_objs:\n        for room in extract_room2ds(df_obj):\n            if room.properties.energy.is_conditioned:\n                # check to be sure the assigned HVAC system is an IdealAirSystem\n                if not isinstance(room.properties.energy.hvac, IdealAirSystem):\n                    room.properties.energy.add_default_ideal_air()\n\n                # create the customized ideal air system\n                new_ideal_air = room.properties.energy.hvac.duplicate()\n                if _economizer_ is not None:\n                    new_ideal_air.economizer_type = _economizer_\n                if dcv_ is not None:\n                    new_ideal_air.demand_controlled_ventilation = dcv_\n                if sensible_hr_ is not None:\n                    new_ideal_air.sensible_heat_recovery = sensible_hr_\n                if latent_hr_ is not None:\n                    new_ideal_air.latent_heat_recovery = latent_hr_\n                if _heat_temp_ is not None:\n                    new_ideal_air.heating_air_temperature = _heat_temp_\n                if _cool_temp_ is not None:\n                    new_ideal_air.cooling_air_temperature = _cool_temp_\n                try:\n                    new_ideal_air.heating_limit = alt_numbers[_heat_limit_]\n                except KeyError:\n                    new_ideal_air.heating_limit = _heat_limit_\n                try:\n                    new_ideal_air.cooling_limit = alt_numbers[_cool_limit_]\n                except KeyError:\n                    new_ideal_air.cooling_limit = _cool_limit_\n\n                # assign the HVAC to the Room\n                room.properties.energy.hvac = new_ideal_air\n", 
  "category": "Dragonfly", 
  "name": "DF IdealAir", 
  "description": "Apply a customized IdealAirSystem to Dragonfly Buildings, Stories or Room2Ds.\n-"
}