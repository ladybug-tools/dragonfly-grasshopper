{
  "version": "1.8.3", 
  "nickname": "DFValidateModel", 
  "outputs": [
    []
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_model", 
      "description": "A Dragonfly Model object to be validated. This can also be the file path\nto a Model DFJSON that will be validated.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "extension_", 
      "description": "Optional text for the name of the dragonfly extension for which\nvalidation will occur. The value input here is case-insensitive such\nthat \"radiance\" and \"Radiance\" will both result in the model being\nchecked for validity with dragonfly-radiance. This value can also be\nset to \"Generic\" in order to run checks for all installed extensions.\nUsing \"Generic\" will run all except the most limiting of checks (like\nDOE2's lack of support for courtyards) with the goal of producing a\nmodel that is export-able to multiple engines (albeit with a little\nextra postprocessing for particularly limited engines). Some common\ndragonfly extension names that can be input here if they are installed\ninclude the following. (Default: Generic).\n* Radiance\n* EnergyPlus\n* OpenStudio\n* DOE2", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_validate", 
      "description": "Set to \"True\" to validate the the Model and get a report of all\nissues with the model.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "2 :: Serialize", 
  "code": "\nimport os\n\ntry:  # import the core dragonfly dependencies\n    from dragonfly.config import folders\n    from dragonfly.model import Model\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly:\\n\\t{}'.format(e))\n\ntry:  # import the core ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, give_warning\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component) and _validate:\n    # re-serialize the model if it is a HBJSON file\n    if isinstance(_model, Model):\n        parsed_model = _model\n    elif isinstance(_model, str) and os.path.isfile(_model):\n        parsed_model = Model.from_dfjson(_model)\n    else:\n        raise ValueError(\n            'Expected Dragonfly Model object or path to a DFJSON file. '\n            'Got {}.'.format(type(_model))\n        )\n\n    # validate the model\n    print(\n        'Validating Model using dragonfly-core=={} and dragonfly-schema=={}'.format(\n            folders.dragonfly_core_version_str, folders.dragonfly_schema_version_str)\n    )\n    # perform several checks for geometry rules\n    extension_ = 'Generic' if extension_ is None else extension_\n    report = parsed_model.check_for_extension(extension_, raise_exception=False)\n    print('Model checks completed.')\n    # check the report and write the summary of errors\n    if report == '':\n        print('Congratulations! Your Model is valid!')\n    else:\n        error_msg = 'Your Model is invalid for the following reasons:'\n        print('\\n'.join([error_msg, report]))\n        give_warning(ghenv.Component, report)\n", 
  "category": "Dragonfly", 
  "name": "DF Validate Model", 
  "description": "Get a validation report that contains a summary of all issues with the Model.\n_\nThis includes basic properties like adjacency checks and all geometry checks.\nFurthermore, extension attributes for Energy and Radiance can be checked\nto ensure that the model can be simulated correctly in these engines.\n-"
}