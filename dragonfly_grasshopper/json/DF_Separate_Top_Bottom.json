{
  "version": "1.8.1", 
  "nickname": "TopBottom", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "buildings", 
        "description": "The Building objects with their top and bottom floors separated.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_buildings", 
      "description": "Dragonfly Building objects which will have their top and bottom\nstories separated into unique ones with a multiplier of 1.\nThis can also be an entire Dragonfly Model.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "sep_mid_", 
      "description": "Boolean to note whether all mid-level Stories with non-unity multipliers\nshould be separated into two or three Stories. This means that the\ntop of each unique story will have outdoor-exposed roofs when no Room2Ds\nare sensed above a given room. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "split_mid_", 
      "description": "Boolean to note whether all mid-level Stories should be split with\nthe Story above in order to set outdoor-exposed roofs with correct\nareas. This is useful when the Story footprints vary a lot as one\nmoves up the building. An attempt will be made to re-assign properties\nto the walls of the rooms but some loss of properties like windows\nis to be expected and may need to be re-assigned. Adjacencies between\nRoom2Ds will be automatically re-solved. This input will have no\neffect when sep_mid_ is False or unspecified. (Default: False).", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Create", 
  "code": "\ntry:  # import the core honeybee dependencies\n    from honeybee.units import parse_distance_string\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the core dragonfly dependencies\n    from dragonfly.model import Model\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.config import units_system, tolerance\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n# tolerance for computing the pole of inaccessibility\np_tol = parse_distance_string('0.01m', units_system())\n\n\ndef split_mid_stories(building):\n    \"\"\"Split the middle stories of a building to ensure matching areas.\"\"\"\n    for x, story in enumerate(building.unique_stories[:-1]):\n        story_above = building.unique_stories[x + 1]\n        story.split_with_story_above(story_above, tolerance)\n        story.set_top_exposed_by_story_above(story_above, p_tol)\n        story.solve_room_2d_adjacency(tolerance, intersect=False)\n\n\nif all_required_inputs(ghenv.Component):\n    # get the building objects from the input ones\n    buildings = [bldg.duplicate() for bldg in _buildings]\n    for bldg in buildings:\n        if sep_mid_ and len(bldg) != 1:\n            if isinstance(bldg, Model):\n                for b in bldg.buildings:\n                    b.separate_mid_floors(p_tol)\n                    if split_mid_:\n                        split_mid_stories(b)\n            else:\n                bldg.separate_mid_floors(p_tol)\n                if split_mid_:\n                    split_mid_stories(bldg)\n        else:\n            bldg.separate_top_bottom_floors()\n", 
  "category": "Dragonfly", 
  "name": "DF Separate Top Bottom", 
  "description": "Separate the top and bottom floors of a Building into unique Stories with a multiplier\nof 1 and automatically assign the first story Room2Ds to have a ground contact\nfloor and the top story Room2Ds to have an outdoor-exposed roof.\n_\nThis is particularly helpful when trying to account for the heat exchange of the\ntop or bottom floors with the gound or outdoors.\n_\nThe \"mid\" options can also be used to separate the middle floors and account for\nheat flow through exposed roofs of middle floors.\n-"
}