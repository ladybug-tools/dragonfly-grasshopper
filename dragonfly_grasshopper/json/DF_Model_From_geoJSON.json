{
  "version": "1.3.0", 
  "nickname": "FromGeoJSON", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "model", 
        "description": "A Dragonfly Model object derived from the input geoJSON.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "other_geo", 
        "description": "Other non-building line segment and polygon data contained\nwithin the geoJSON. Will be None unless other_geo_ is set to True.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "location", 
        "description": "A ladybug Location object possessing longitude and lattiude data\nused to position geoJSON file on the globe.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "point", 
        "description": "A Point for where the _location object exists within the space of\nthe Rhino scene. This is can be used to re-position the geoJSON\nfile on the globe when re-exporting the Dragonfly Model to geoJSON.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_geojson", 
      "description": "Text for the full path to a geojson file to be loaded as a\nDragonfly Model.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_point_", 
      "description": "An optional Point for where the bottom-left corner of the bounding\nrectangle around all of the geoJSON building footprints exists\nwithin the Rhino scene. (Default: (0, 0), the Rhino origin).", 
      "type": "Point3d", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "all_to_bldg_", 
      "description": "Boolean to indicate if all polygon and multi-polygon geometries\nin the geojson file should be considered Buildings. If False or\nunspecified, this component will only generate Dragonfly Buildings\nfrom geometries that are defined as a 'Building' in the 'type'\nfield of the 'properties' field of each geoJSON feature. Note that\nthis 'type' field is not a universal convention of all geoJSONs.\nHowever, all Dragonfly-expored geoJSONs will have it and all\nURBANopt-compatible geoJSONs will also have it.", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "other_geo_", 
      "description": "Boolean to indicate whether geometry that is not identified as\na dragonfly Building should be imported. For large geoJSONs,\nthis can potentially increase the component runtime a lot but\nthis geometry may be useful for constructing other important\nfeatures like context or electical networks.", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_import", 
      "description": "Set to \"True\" to import the geoJSON as a Dragonfly Model.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "2 :: Serialize", 
  "code": "\nimport json\n\ntry:  # import the ladybug_geometry dependencies\n    from ladybug_geometry.geometry2d.pointvector import Point2D\n    from ladybug_geometry.geometry2d.line import LineSegment2D\n    from ladybug_geometry.geometry2d.polyline import Polyline2D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_geometry:\\n\\t{}'.format(e))\n\ntry:  # import the core dragonfly dependencies\n    from dragonfly.model import Model\n    from dragonfly.projection import meters_to_long_lat_factors, \\\n        origin_long_lat_from_location, lon_lat_to_polygon\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.togeometry import to_point2d\n    from ladybug_{{cad}}.fromgeometry import from_point2d, from_linesegment2d, \\\n        from_polyline2d\n    from ladybug_{{cad}}.config import tolerance, angle_tolerance, units_system, \\\n        conversion_to_meters\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component) and _import:\n    # set default inputs if not specified\n    pt = to_point2d(_point_) if _point_ is not None else Point2D(0, 0)\n    all_to_bldg = bool(all_to_bldg_)  # handle case of None\n    model_units, con_fac = units_system(), 1 / conversion_to_meters()\n\n    # convert the geoJSON to a dragonfly Model\n    model, location = Model.from_geojson(\n        _geojson,\n        point=pt,\n        all_polygons_to_buildings=all_to_bldg,\n        units=model_units,\n        tolerance=tolerance,\n        angle_tolerance=angle_tolerance)\n    point = from_point2d(pt)\n\n    # if other geometry has been requested, then import it\n    if other_geo_:\n        # parse the geoJSON into a dictionary and get lat/lon converters\n        with open(_geojson, 'r') as fp:\n            data = json.load(fp)\n        origin_lon_lat = origin_long_lat_from_location(location, pt)\n        _convert_facs = meters_to_long_lat_factors(origin_lon_lat)\n        convert_facs = 1 / _convert_facs[0], 1 / _convert_facs[1]\n\n        # get all of the non-building geometry features\n        geo_types = ('LineString', 'Polygon')\n        geo_data = [geo for geo in data['features'] if 'geometry' in geo\n                    and geo['geometry']['type'] in geo_types]\n        if not all_to_bldg:  # exclude anything with a Building key\n            geo_data = [geo for geo in geo_data if 'type' not in geo['properties']\n                        or geo['properties']['type'] != 'Building']\n\n        # convert all of the geoJSON data into {{Cad}} geometry\n        other_geo = []\n        for geo_dat in geo_data:\n            if geo_dat['geometry']['type'] == 'LineString':\n                coords = lon_lat_to_polygon(geo_dat['geometry']['coordinates'],\n                                            origin_lon_lat, convert_facs)\n                pts = tuple(Point2D.from_array(pt) for pt in coords)\n                line = LineSegment2D.from_end_points(pts[0], pts[1]) \\\n                    if len(pts) == 2 else Polyline2D(pts)\n                if con_fac != 1:\n                    line = line.scale(con_fac, pt)\n                if len(pts) == 2:\n                    other_geo.append(from_linesegment2d(line))\n                else:\n                    other_geo.append(from_polyline2d(line))\n            else:  # is's a polygon\n                coords = lon_lat_to_polygon(geo_dat['geometry']['coordinates'][0],\n                                            origin_lon_lat, convert_facs)\n                pts = tuple(Point2D.from_array(pt) for pt in coords)\n                poly = Polyline2D(pts)\n                if con_fac != 1:\n                    poly = poly.scale(con_fac, pt)\n                other_geo.append(from_polyline2d(poly))\n", 
  "category": "Dragonfly", 
  "name": "DF Model From geoJSON", 
  "description": "Create a Dragonfly Model from a geoJSON file.\n-"
}