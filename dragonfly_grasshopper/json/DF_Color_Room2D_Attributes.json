{
  "version": "1.1.0", 
  "nickname": "ColorRoom2DAttr", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "mesh", 
        "description": "Meshes of the Room2D floors colored according to their attributes.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "legend", 
        "description": "Geometry representing the legend for colored meshes.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "wire_frame", 
        "description": "A list of lines representing the outlines of the rooms.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "values", 
        "description": "A list of values that align with the input Room2Ds noting the\nattribute assigned to each Room2D.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "colors", 
        "description": "A list of colors that align with the input Room2Ds, noting the color\nof each Room2D in the Rhino scene. This can be used in conjunction\nwith the native Grasshopper \"Custom Preview\" component and other\ndragonfly visualization components (like \"DF Visulaize All\") to\ncreate custom visualizations in the Rhino scene.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_df_obj", 
      "description": "A Dragonfly Model, Building, Story or Room2D to be colored\nwith their attributes in the Rhino scene.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_attribute", 
      "description": "Text for the name of the Room2D attribute by which the Room2Ds\nshould be separated. The \"DF Room2D Attributes\" component lists\nall of the attributes of the Room2D.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "legend_par_", 
      "description": "An optional LegendParameter object to change the display\nof the colored Room2Ds. (Default: None).", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "1 :: Visualize", 
  "code": "\ntry:  # import the core dragonfly dependencies\n    from dragonfly.colorobj import ColorRoom2D\n    from dragonfly.model import Model\n    from dragonfly.building import Building\n    from dragonfly.story import Story\n    from dragonfly.room2d import Room2D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.fromgeometry import from_face3ds_to_colored_mesh, \\\n        from_face3d_to_wireframe\n    from ladybug_{{cad}}.fromobjects import legend_objects\n    from ladybug_{{cad}}.color import color_to_color\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # extract any rooms from input Models\n    rooms = []\n    for df_obj in _df_obj:\n        if isinstance(df_obj, Model):\n            for bldg in df_obj.buildings:\n                rooms.extend(bldg.all_room_2ds())\n        elif isinstance(df_obj, Building):\n            rooms.extend(df_obj.all_room_2ds())\n        elif isinstance(df_obj, Story):\n            rooms.extend(df_obj.room_2ds)\n        elif isinstance(df_obj, Room2D):\n            rooms.extend([df_obj])\n\n    # create the ColorRoom visualization object and output geometry\n    color_obj = ColorRoom2D(rooms, _attribute, legend_par_)\n    graphic = color_obj.graphic_container\n    mesh = [from_face3ds_to_colored_mesh([flrs], col) for flrs, col in\n            zip(color_obj.floor_faces, graphic.value_colors)]\n    wire_frame = []\n    for room in rooms:\n        wire_frame.extend(from_face3d_to_wireframe(room.floor_geometry))\n    legend = legend_objects(graphic.legend)\n    values = color_obj.attributes\n    colors = [color_to_color(col) for col in graphic.value_colors]", 
  "category": "Dragonfly", 
  "name": "DF Color Room2D Attributes", 
  "description": "Color Dragonfly Room2Ds in the Rhino scene using their attributes.\n_\nThis can be used as a means to check that correct properties are assigned to\ndifferent Room2Ds.\n-"
}