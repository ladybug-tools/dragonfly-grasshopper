{
  "version": "1.1.1", 
  "nickname": "DFAllAirHVAC", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "report", 
        "description": "Script variable OSHVACSystems", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "df_objs", 
        "description": "The input Dragonfly objects with an all-air HVAC system applied.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_df_objs", 
      "description": "Dragonfly Buildings, Stories or Room2Ds to which the input template\nHVAC will be assigned. If a list of Room2Ds is input, all objects\nwill receive the same HVAC instance. Otherwise, each object gets its\nown instance (eg. each input Story will get its own HVAC).", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_system_type", 
      "description": "Text for the specific type of all-air system and equipment.\nThe \"HB All-Air HVAC Templates\" component has a full list of the\nsupported all-air system templates.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_vintage_", 
      "description": "Text for the vintage of the template system. This will be used\nto set efficiencies for various pieces of equipment within the system.\nThe \"HB Building Vintages\" component has a full list of supported\nHVAC vintages. (Default: ASHRAE_2013).", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_name_", 
      "description": "Text to set the name for the HVAC system and to be incorporated into\nunique HVAC identifier. If the name is not provided, a random name\nwill be assigned.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_economizer_", 
      "description": "Text to indicate the type of air-side economizer used on the\nHVAC system. Economizers will mix in a greater amount of outdoor\nair to cool the zone (rather than running the cooling system) when\nthe zone needs cooling and the outdoor air is cooler than the zone.\nChoose from the options below. If Inferred, the economizer will be set\nto whatever is recommended for the given vintage. Default: Inferred.\n* Inferred\n* NoEconomizer\n* DifferentialDryBulb\n* DifferentialEnthalpy", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "sensible_hr_", 
      "description": "A number between 0 and 1 for the effectiveness of sensible\nheat recovery within the system. Typical values range from 0.5 for\nsimple glycol loops to 0.81 for enthalpy wheels (the latter tends to\nbe fiarly expensive for air-based systems) Default: auto-calculated\nby vintage (usually 0 for no heat recovery).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "latent_hr_", 
      "description": "A number between 0 and 1 for the effectiveness of latent heat\nrecovery within the system. Typical values are 0 for all types of\nheat recovery except enthalpy wheels, which can have values as high\nas 0.76. Default: auto-calculated by vintage (usually 0 for no heat\nrecovery).", 
      "type": "double", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Energy", 
  "code": "\nimport os\nimport json\nimport uuid\n\ntry:  # import the honeybee extension\n    from honeybee.altnumber import autosize\n    from honeybee.typing import clean_and_id_ep_string\n    from honeybee.model import Model\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the honeybee-energy extension\n    from honeybee_energy.config import folders\n    from honeybee_energy.hvac.allair import EQUIPMENT_TYPES_DICT\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\ntry:  # import the core dragonfly dependencies\n    from dragonfly.building import Building\n    from dragonfly.story import Story\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly:\\n\\t{}'.format(e))\n\ntry:  # import the dragonfly-energy extension\n    import dragonfly_energy\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly_energy energy:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n# dictionary to get correct vintages\nvintages = {\n    'DOE_Ref_Pre_1980': 'DOE_Ref_Pre_1980',\n    'DOE_Ref_1980_2004': 'DOE_Ref_1980_2004',\n    'ASHRAE_2004': 'ASHRAE_2004',\n    'ASHRAE_2007': 'ASHRAE_2007',\n    'ASHRAE_2010': 'ASHRAE_2010',\n    'ASHRAE_2013': 'ASHRAE_2013',\n    'DOE Ref Pre-1980': 'DOE_Ref_Pre_1980',\n    'DOE Ref 1980-2004': 'DOE_Ref_1980_2004',\n    '90.1-2004': 'ASHRAE_2004',\n    '90.1-2007': 'ASHRAE_2007',\n    '90.1-2010': 'ASHRAE_2010',\n    '90.1-2013': 'ASHRAE_2013',\n    'pre_1980': 'DOE_Ref_Pre_1980',\n    '1980_2004': 'DOE_Ref_1980_2004',\n    '2004': 'ASHRAE_2004',\n    '2007': 'ASHRAE_2007',\n    '2010': 'ASHRAE_2010',\n    '2013': 'ASHRAE_2013',\n    None: 'ASHRAE_2013'\n    }\n\n# dictionary of HVAC template names\next_folder = folders.standards_extension_folders[0]\nhvac_reg = os.path.join(ext_folder, 'hvac_registry.json')\nwith open(hvac_reg, 'r') as f:\n    hvac_dict = json.load(f)\n\n\nif all_required_inputs(ghenv.Component):\n    # duplicate the initial objects\n    df_objs = [obj.duplicate() for obj in _df_objs]\n\n    # create the instance of the HVAC system to be applied to the objects\n    try:  # get the class for the HVAC system\n        try:\n            _sys_name = hvac_dict[_system_type]\n        except KeyError:\n            _sys_name = _system_type\n        hvac_class = EQUIPMENT_TYPES_DICT[_sys_name]\n    except KeyError:\n        raise ValueError('System Type \"{}\" is not recognized as an all-air HVAC '\n                         'system.'.format(_system_type))\n    vintage = vintages[_vintage_]  # get the vintage of the HVAC\n    # set default values for economizer and heat recovery\n    econ = _economizer_ if _economizer_ is not None else 'Inferred'\n    sens = sensible_hr_ if sensible_hr_ is not None else autosize\n    latent = latent_hr_ if latent_hr_ is not None else autosize\n    # get an identifier for the HVAC system\n    name = clean_and_id_ep_string(_name_) if _name_ is not None else str(uuid.uuid4())[:8]\n    hvac = hvac_class(name, vintage, _sys_name, econ, sens, latent)\n    if _name_ is not None:\n        hvac.display_name = _name_\n\n    # apply the HVAC system to the objects\n    for obj in df_objs:\n        if isinstance(obj, (Building, Story)):\n            obj.properties.energy.set_all_room_2d_hvac(hvac)\n        elif obj.properties.energy.is_conditioned:  # assume it's a Room2D\n            obj.properties.energy.hvac = hvac\n", 
  "category": "Dragonfly", 
  "name": "DF All-Air HVAC", 
  "description": "Apply an All-Air template HVAC to a list of Dragonfly Buildings, Stories or Room2Ds.\n_\nAll-air systems provide both ventilation and satisfaction of heating + cooling\ndemand with the same stream of warm/cool air. As such, they often grant tight\ncontrol over zone humidity. However, because such systems often involve the\ncooling of air only to reheat it again, they are often more energy intensive\nthan systems that separate ventilation from the meeting of thermal loads.\n-"
}