{
  "version": "1.8.2", 
  "nickname": "ToGeoJSON", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "geojson", 
        "description": "The path to a geoJSON file that contains polygons for all of the\nBuildings within the dragonfly model along with their properties\n(floor area, number of stories, etc.). The polygons will also possess\ndetailed_model_filename keys that align with where the Honeybee Model\nJSONs are written.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "net_json", 
        "description": "A JSON file containing a representation of the electrical or street\nnetwork. This can be loaded back to the original object using the\n\"DF Load Objects\" component. This will be None if no network_ is\nconnected.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "hb_jsons", 
        "description": "A list of file paths to honeybee Model JSONS that correspond to\nthe detailed_model_filename keys in the geojson.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "hb_models", 
        "description": "A list of honeybee Model objects that were generated in process\nof writing the URBANopt files. These can be visulazed using the\ncomponents in the Honeybee 1 :: Visualize tab in order to verify\nthat properties have been translated as expected.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_model", 
      "description": "A Dragonfly Model object.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_location", 
      "description": "A ladybug Location object possessing longitude and lattiude data\nused to position geoJSON file on the globe.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_point_", 
      "description": "A Point for where the _location object exists within the space of\nthe Rhino scene. This is used to posistion the geoJSON file on the\nglobe. (Default: Rhino origin (0, 0, 0)).", 
      "type": "Point3d", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "use_multiplier_", 
      "description": "If True, the multipliers on each Building's Stories will be\npassed along to the generated Honeybee Room objects, indicating the\nsimulation will be run once for each unique room and then results\nwill be multiplied. If False, full geometry objects will be written\nfor each and every story in the building such that all resulting\nmultipliers will be 1. (Default: True).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "add_plenum_", 
      "description": "Boolean to indicate whether ceiling/floor plenum depths\nassigned to Room2Ds should be ignored during translation. This\nresults in each Room2D translating to a single Honeybee Room at\nthe full floor-to-ceiling height instead of a base Room with (a)\nplenum Room(s). (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "ceil_adjacency_", 
      "description": "Boolean to note whether adjacencies should be solved between\ninterior stories when Room2Ds perfectly match one another in\ntheir floor plate. This ensures that Surface boundary conditions\nare used instead of Adiabatic ones. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "shade_dist_", 
      "description": "An optional number to note the distance beyond which other\nbuildings' shade should not be exported into a given Model. This is\nhelpful for reducing the simulation run time of each Model when other\nconnected buildings are too far away to have a meaningful impact on\nthe results. If None, all other buildings will be included as context\nshade in each and every Model. Set to 0 to exclude all neighboring\nbuildings from the resulting models. Default: None.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "des_loop_", 
      "description": "An optional District Energy System (DES) ThermalLoop that's\nassociated with the dragonfly Model.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "network_", 
      "description": "An optional OpenDSS ElectricalNetwork or RNM RoadNetwork that's\nassociated with the input Dragonfly Model and will be written into\nthe geoJSON. An input here is required to perform an OpenDSS\nor RNM simulation after running URBANopt.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "ground_pv_", 
      "description": "An optional list of REopt GroundMountPV objects representing\nground-mounted photovoltaic fields to be included in a REopt\nsimulation after running URBANopt.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_folder_", 
      "description": "Text for the full path to the folder where the geojson will be\nwritten along with all of the Honeybee Model JSONs. If None, the\nhoneybee default simulation folder is used.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_write", 
      "description": "Set to \"True\" to have the Dragonfly Model translated to an URBANopt-\ncompatible geoJSON. This input can also be the integer \"2\",\nwhich will only create the geojson file but not create any honeybee\nModel json files that are linked to it (note that a geojson produced\nthis way is not compatible with URBANopt).", 
      "type": "int", 
      "default": null
    }
  ], 
  "subcategory": "2 :: Serialize", 
  "code": "\nimport os\nimport json\n\ntry:  # import the ladybug_geometry dependencies\n    from ladybug_geometry.geometry2d.pointvector import Point2D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_geometry:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug dependencies\n    from ladybug.location import Location\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:  # import the core dragonfly dependencies\n    from dragonfly.model import Model\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly:\\n\\t{}'.format(e))\n\ntry:  # import the dragonfly_energy dependencies\n    from dragonfly_energy.opendss.network import ElectricalNetwork, RoadNetwork\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly_energy:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.togeometry import to_point2d\n    from ladybug_{{cad}}.config import tolerance\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component) and _write:\n    # check the _model and _location input\n    assert isinstance(_model, Model), \\\n        'Expected Dragonfly Model object. Got {}.'.format(type(_model))\n    assert isinstance(_location, Location), \\\n        'Expected Ladybug Location object. Got {}.'.format(type(_location))\n\n    # set default inputs if not specified\n    point = to_point2d(_point_) if _point_ is not None else Point2D(0, 0)\n    use_multiplier_ = use_multiplier_ if use_multiplier_ is not None else True\n    no_plenum_ = no_plenum_ if no_plenum_ is not None else False\n    ceil_adjacency_ = ceil_adjacency_ if ceil_adjacency_ is not None else False\n\n    if _write == 2:\n        geojson = _model.to_geojson(_location, point, _folder_, tolerance)\n    else:\n        # process any input electrical or road networks\n        if network_ is None:\n            elec_network, road_network = None, None\n        elif isinstance(network_, ElectricalNetwork):\n            elec_network, road_network = network_, None\n        elif isinstance(network_, RoadNetwork):\n            elec_network, road_network = None, network_\n        # create the geoJSON and honeybee Model JSONs\n        geojson, hb_jsons, hb_models = _model.to.urbanopt(\n            _model, _location, point, shade_dist_, use_multiplier_,\n            no_plenum_, ceil_adjacency_, des_loop=des_loop_,\n            electrical_network=elec_network, road_network=road_network,\n            ground_pv=ground_pv_, folder=_folder_, tolerance=tolerance)\n        # write the network to a JSON so that it can be loaded in the future\n        if network_ is not None:\n            proj_folder = os.path.dirname(geojson)\n            net_json = os.path.join(proj_folder, 'network.json')\n            with open(net_json, 'w') as nj:\n                json.dump(network_.to_dict(), nj)\n", 
  "category": "Dragonfly", 
  "name": "DF Model To geoJSON", 
  "description": "Convert a Dragonfly Model into an URBANopt-compatible geoJSON with linked Honeybee\nModel JSONs. Honeybee Model JSONs will be referenced using the \"detailed_model_filename\"\nkey in the geoJSON.\n-"
}