{
  "version": "0.1.7", 
  "nickname": "Room2D", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "room2d", 
        "description": "Dragonfly Room2Ds.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_geo", 
      "description": "A list of horizontal Rhino surfaces representing floor plates to\nbe converted into Room2Ds.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_flr_to_ceiling", 
      "description": "A number for the height above the floor where the\nceiling begins. Typical values range from 3 to 5 meters.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_name_", 
      "description": "Text to set the base name for the Room2D, which will also be\nincorporated into unique Room2D identifier. This will be combined\nwith the index of each input _footprint_geo to yield a unique name\nfor each output Room2D. If the name is not provided, a random one\nwill be assigned.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_program_", 
      "description": "Text for the program of the Room2Ds (to be looked up in the\nProgramType library) such as that output from the \"HB List Programs\"\ncomponent. This can also be a custom ProgramType object. If no program\nis input here, the Room2Ds will have a generic office program.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_constr_set_", 
      "description": "Text for the construction set of the Room2Ds, which is used\nto assign all default energy constructions needed to create an energy\nmodel. Text should refer to a ConstructionSet within the library such\nas that output from the \"HB List Construction Sets\" component. This\ncan also be a custom ConstructionSet object. If nothing is input here,\nthe Room2Ds will have a generic construction set that is not sensitive\nto the Room2Ds's climate or building energy code.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "conditioned_", 
      "description": "Boolean to note whether the Room2Ds have heating and cooling\nsystems.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Create", 
  "code": "\n\ntry:  # import the core honeybee dependencies\n    from honeybee.typing import clean_and_id_string\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the core dragonfly dependencies\n    from dragonfly.room2d import Room2D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.config import tolerance\n    from ladybug_{{cad}}.togeometry import to_face3d\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\ntry:  # import the dragonfly-energy extension\n    import dragonfly_energy\n    from honeybee_energy.lib.programtypes import program_type_by_identifier, \\\n        office_program\n    from honeybee_energy.lib.constructionsets import construction_set_by_identifier\nexcept ImportError as e:\n    if _program_ is not None:\n        raise ValueError('_program_ has been specified but dragonfly-energy '\n                         'has failed to import.\\n{}'.format(e))\n    elif _constr_set_ is not None:\n        raise ValueError('_constr_set_ has been specified but dragonfly-energy '\n                         'has failed to import.\\n{}'.format(e))\n    elif conditioned_ is not None:\n        raise ValueError('conditioned_ has been specified but dragonfly-energy '\n                         'has failed to import.\\n{}'.format(e))\n\nimport uuid\n\n\nif all_required_inputs(ghenv.Component):\n    room2d = []  # list of room2ds that will be returned\n    face3ds = [face for geo in _geo for face in to_face3d(geo)]  # convert to lb geo\n    for i, geo in enumerate(face3ds):\n        # get the name for the Room2D\n        if _name_ is None:  # make a default Room2D name\n            name = \"Room_{}\".format(str(uuid.uuid4())[:8])\n        else:\n            display_name = '{}_{}'.format(_name_, i + 1)\n            name = clean_and_id_string(display_name)\n\n        # create the Room2D\n        room = Room2D(name, geo, _flr_to_ceiling, tolerance=tolerance)\n        if _name_ is not None:\n            room.display_name = display_name\n\n        # assign the program\n        if _program_ is not None:\n            if isinstance(_program_, str):\n                _program_ = program_type_by_identifier(_program_)\n            room.properties.energy.program_type = _program_ \n        else:  # generic office program by default\n            try:\n                room.properties.energy.program_type = office_program\n            except (NameError, AttributeError):\n                pass  # honeybee-energy is not installed\n        \n        # assign the construction set\n        if _constr_set_ is not None:\n            if isinstance(_constr_set_, str):\n                _constr_set_ = construction_set_by_identifier(_constr_set_)\n            room.properties.energy.construction_set = _constr_set_\n        \n        # assign an ideal air system\n        if conditioned_ or conditioned_ is None:  # conditioned by default\n            try:\n                room.properties.energy.add_default_ideal_air()\n            except (NameError, AttributeError):\n                pass  # honeybee-energy is not installed\n        \n        room2d.append(room)\n", 
  "category": "Dragonfly", 
  "name": "DF Room2D", 
  "description": "Create Dragonfly Room2Ds from floor plate geometry (horizontal Rhino surfaces).\n-"
}