{
  "version": "1.2.1", 
  "nickname": "BuildingSolid", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "buildings", 
        "description": "Dragonfly buildings.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_bldg_geo", 
      "description": "A list of closed Rhino polysurfaces to be converted into Buildings.", 
      "type": "Brep", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_floor_to_floor", 
      "description": "An array of floor-to-floor height instructions\nthat describe how a building mass should be divided into floors.\nThe array should run from bottom floor to top floor.\nEach item in the array can be either a single number for the\nfloor-to-floor height or a text string that codes for how many\nfloors of each height should be generated.  For example, inputting\n\"2@4\" will make two floors with a height of 4 units. Simply inputting\n\"@3\" will make all floors at 3 units.  Putting in sequential arrays\nof these text strings will divide up floors accordingly.  For example,\nthe list [\"1@5\", \"2@4\", \"@3\"]  will make a ground floor of 5 units,\ntwo floors above that at 4 units and all remaining floors at 3 units.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "perim_offset_", 
      "description": "An optional positive number that will be used to offset\nthe perimeter of the footprint to create core/perimeter Rooms.\nIf this value is None or 0, no offset will occur and each floor\nplate will be represented with a single Room2D.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_name_", 
      "description": "Text to set the base name for the Building, which will also be\nincorporated into unique Building identifier. This will be combined\nwith the index of each input _bldg_geo to yield a unique name\nfor each output Building. If the name is not provided, a random one\nwill be assigned.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_program_", 
      "description": "Text for the program of the Buildings (to be looked up in the\nProgramType library) such as that output from the \"HB List Programs\"\ncomponent. This can also be a custom ProgramType object. If no program\nis input here, the Buildings will have a generic office program.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_constr_set_", 
      "description": "Text for the construction set of the Buildings, which is used\nto assign all default energy constructions needed to create an energy\nmodel. Text should refer to a ConstructionSet within the library such\nas that output from the \"HB List Construction Sets\" component. This\ncan also be a custom ConstructionSet object. If nothing is input here,\nthe Buildings will have a generic construction set that is not sensitive\nto the Buildings's climate or building energy code.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "conditioned_", 
      "description": "Boolean to note whether the Buildings have heating and cooling\nsystems.", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to True to run the component and create Dragonfly Buildings.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Create", 
  "code": "\ntry:  # import the core honeybee dependencies\n    from honeybee.typing import clean_and_id_string, clean_string\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the core dragonfly dependencies\n    from dragonfly.building import Building\n    from dragonfly.subdivide import interpret_floor_height_subdivide\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly:\\n\\t{}'.format(e))\n\ntry:  # import the core ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.config import tolerance\n    from ladybug_{{cad}}.intersect import split_solid_to_floors, geo_min_max_height\n    from ladybug_{{cad}}.togeometry import to_face3d\n    from ladybug_{{cad}}.fromgeometry import from_face3d\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, longest_list, \\\n        document_counter\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\ntry:  # import the dragonfly-energy extension\n    import dragonfly_energy\n    from honeybee_energy.lib.programtypes import program_type_by_identifier, \\\n        building_program_type_by_identifier, office_program\n    from honeybee_energy.lib.constructionsets import construction_set_by_identifier\nexcept ImportError as e:\n    if len(_program_) != 0:\n        raise ValueError('_program_ has been specified but dragonfly-energy '\n                         'has failed to import.\\n{}'.format(e))\n    elif len(_constr_set_) != 0:\n        raise ValueError('_constr_set_ has been specified but dragonfly-energy '\n                         'has failed to import.\\n{}'.format(e))\n    elif len(conditioned_) != 0:\n        raise ValueError('conditioned_ has been specified but dragonfly-energy '\n                         'has failed to import.\\n{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component) and _run:\n    perim_offset_ = 0 if perim_offset_ is None else perim_offset_\n    buildings = []  # list of buildings that will be returned\n    for i, geo in enumerate(_bldg_geo):\n        # get the name for the Building\n        if len(_name_) == 0:  # make a default Building name\n            display_name = 'Building_{}'.format(document_counter('bldg_count'))\n            name = clean_and_id_string(display_name)\n        else:\n            display_name = '{}_{}'.format(longest_list(_name_, i), i + 1) \\\n                if len(_name_) != len(_bldg_geo) else longest_list(_name_, i)\n            name = clean_string(display_name)\n\n        # interpret the input _floor_to_floor information\n        min, max = geo_min_max_height(geo)\n        floor_heights, interpreted_f2f = interpret_floor_height_subdivide(\n            _floor_to_floor, max, min)\n\n        # get the floor geometries of the building\n        floor_breps = split_solid_to_floors(geo, floor_heights)\n        floor_faces = []\n        for flr in floor_breps:\n            story_faces = []\n            for rm_face in flr:\n                story_faces.extend(to_face3d(rm_face))\n            floor_faces.append(story_faces)\n\n        # create the Building\n        building = Building.from_all_story_geometry(\n            name, floor_faces, floor_to_floor_heights=interpreted_f2f,\n            perimeter_offset=perim_offset_, tolerance=tolerance)\n        building.display_name = display_name\n\n        # assign the program\n        if len(_program_) != 0:\n            program = longest_list(_program_, i)\n            if isinstance(program, str):\n                try:\n                    program = building_program_type_by_identifier(program)\n                except ValueError:\n                    program = program_type_by_identifier(program)\n            building.properties.energy.set_all_room_2d_program_type(program)\n        else:  # generic office program by default\n            try:\n                building.properties.energy.set_all_room_2d_program_type(office_program)\n            except (NameError, AttributeError):\n                pass  # honeybee-energy is not installed\n\n        # assign the construction set\n        if len(_constr_set_) != 0:\n            constr_set = longest_list(_constr_set_, i)\n            if isinstance(constr_set, str):\n                constr_set = construction_set_by_identifier(constr_set)\n            building.properties.energy.construction_set = constr_set\n\n        # assign an ideal air system\n        if len(conditioned_) == 0 or longest_list(conditioned_, i):\n            try:\n                building.properties.energy.add_default_ideal_air()\n            except (NameError, AttributeError):\n                pass  # honeybee-energy is not installed\n\n        buildings.append(building)\n", 
  "category": "Dragonfly", 
  "name": "DF Building from Solid", 
  "description": "Create Dragonfly Buildings from solid geometry (closed Rhino polysurfaces).\n-"
}