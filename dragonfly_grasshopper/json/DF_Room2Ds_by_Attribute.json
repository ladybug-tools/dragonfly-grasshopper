{
  "version": "1.2.0", 
  "nickname": "Room2DsByAttr", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "values", 
        "description": "A list of values with one attribute value for each branch of the\noutput rooms.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "room2ds", 
        "description": "A data tree of honeybee rooms with each branch of the tree\nrepresenting a different attribute value.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_df_obj", 
      "description": "A Dragonfly Model, Building, Story or Room2D to be separated\nand grouped based on room attributes.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_attribute", 
      "description": "Text for the name of the Room2D attribute by which the Room2Ds\nshould be separated. The \"DF Room2D Attributes\" component lists\nall of the attributes of the Room2D.", 
      "type": "string", 
      "default": null
    }
  ], 
  "subcategory": "1 :: Visualize", 
  "code": "\ntry:  # import the core dragonfly dependencies\n    from dragonfly.colorobj import ColorRoom2D\n    from dragonfly.model import Model\n    from dragonfly.building import Building\n    from dragonfly.story import Story\n    from dragonfly.room2d import Room2D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import dragonfly:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    \n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, list_to_data_tree\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # extract any rooms from input Models\n    in_rooms = []\n    for df_obj in _df_obj:\n        if isinstance(df_obj, Model):\n            in_rooms.extend(df_obj.room_2ds)\n        elif isinstance(df_obj, Building):\n            in_rooms.extend(df_obj.unique_room_2ds)\n        elif isinstance(df_obj, Story):\n            in_rooms.extend(df_obj.room_2ds)\n        elif isinstance(df_obj, Room2D):\n            in_rooms.append(df_obj)\n\n    # use the ColorRoom object to get a set of attributes assigned to the rooms\n    color_obj = ColorRoom2D(in_rooms, _attribute)\n    values = color_obj.attributes_unique\n\n    # loop through each of the room_2ds and get the attributes\n    room2ds = [[] for val in values]\n    for atr, room in zip(color_obj.attributes, in_rooms):\n        atr_i = values.index(atr)\n        room2ds[atr_i].append(room)\n    room2ds = list_to_data_tree(room2ds)\n", 
  "category": "Dragonfly", 
  "name": "DF Room2Ds by Attribute", 
  "description": "Separate and group dragonfly Room2Ds by any attribute that the room possesses.\n_\nThis can be used to group Room2Ds by program, whether rooms are conditioned, etc.\n-"
}